// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WildlifeMortalities.Data;

#nullable disable

namespace WildlifeMortalities.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AssistantGuideOutfitterGuidedHuntReport", b =>
                {
                    b.Property<int>("AssistantGuidesId")
                        .HasColumnType("int");

                    b.Property<int>("OutfitterGuidedHuntReportsAsAssistantGuideId")
                        .HasColumnType("int");

                    b.HasKey("AssistantGuidesId", "OutfitterGuidedHuntReportsAsAssistantGuideId");

                    b.HasIndex("OutfitterGuidedHuntReportsAsAssistantGuideId");

                    b.ToTable("AssistantGuideOutfitterGuidedHuntReport");
                });

            modelBuilder.Entity("BigGameHuntingLicenceOutfitterArea", b =>
                {
                    b.Property<int>("BigGameHuntingLicencesId")
                        .HasColumnType("int");

                    b.Property<int>("OutfitterAreasId")
                        .HasColumnType("int");

                    b.HasKey("BigGameHuntingLicencesId", "OutfitterAreasId");

                    b.HasIndex("OutfitterAreasId");

                    b.ToTable("BigGameHuntingLicenceOutfitterArea");
                });

            modelBuilder.Entity("OutfitterAreaOutfitterAssistantGuideLicence", b =>
                {
                    b.Property<int>("OutfitterAreasId")
                        .HasColumnType("int");

                    b.Property<int>("OutfitterAssistantGuideLicencesId")
                        .HasColumnType("int");

                    b.HasKey("OutfitterAreasId", "OutfitterAssistantGuideLicencesId");

                    b.HasIndex("OutfitterAssistantGuideLicencesId");

                    b.ToTable("OutfitterAreaOutfitterAssistantGuideLicence");
                });

            modelBuilder.Entity("OutfitterAreaOutfitterChiefGuideLicence", b =>
                {
                    b.Property<int>("OutfitterAreasId")
                        .HasColumnType("int");

                    b.Property<int>("OutfitterChiefGuideLicencesId")
                        .HasColumnType("int");

                    b.HasKey("OutfitterAreasId", "OutfitterChiefGuideLicencesId");

                    b.HasIndex("OutfitterChiefGuideLicencesId");

                    b.ToTable("OutfitterAreaOutfitterChiefGuideLicence");
                });

            modelBuilder.Entity("OutfitterAreaSmallGameHuntingLicence", b =>
                {
                    b.Property<int>("OutfitterAreasId")
                        .HasColumnType("int");

                    b.Property<int>("SmallGameHuntingLicencesId")
                        .HasColumnType("int");

                    b.HasKey("OutfitterAreasId", "SmallGameHuntingLicencesId");

                    b.HasIndex("SmallGameHuntingLicencesId");

                    b.ToTable("OutfitterAreaSmallGameHuntingLicence");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.AppConfiguration", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Key");

                    b.ToTable("AppConfigurations");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.Authorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModifiedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PosseId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("ValidFromDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ValidToDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("PersonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Authorizations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Authorization");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.InvalidAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("PosseId")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("ValidFromDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("ValidToDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ValidationErrorMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("InvalidAuthorizations");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisStatus")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateSubmitted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RequiredOrganicMaterialsStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BioSubmissions", t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("BioSubmission");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.GameManagementArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComputedColumnSql("[Zone] + '-' + [Subzone]", true);

                    b.Property<string>("Subzone")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id");

                    b.ToTable("GameManagementAreas");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.Mortality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DateOfDeath")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Family")
                        .HasColumnType("int");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(10, 8)
                        .HasColumnType("decimal(10,8)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(11, 8)
                        .HasColumnType("decimal(11,8)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.ToTable("Mortalities", null, t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator<string>("Discriminator").HasValue("Mortality");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.OutfitterArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Area")
                        .IsUnique();

                    b.ToTable("OutfitterAreas");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.People.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("LastModifiedDateTime")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("People", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.RegisteredTrappingConcession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("RegisteredTrappingConcessions");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.DraftReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("DateLastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateSubmitted")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("SerializedData")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("DraftReports");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("DateSubmitted")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("HumanReadableId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<int>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int?>("ViolationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("HumanReadableId")
                        .IsUnique();

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("SeasonId");

                    b.HasIndex("ViolationId");

                    b.ToTable("Reports");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Report");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.ReportPdf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportPdf");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Activities", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Activity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FriendlyName")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Seasons");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Season");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NameIdentifier")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Violation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.ToTable("Violations");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.BigGameHuntingLicence", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Authorizations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Authorizations_Type_Enum", "[Type] IN (10, 20, 30, 40, 50, 60, 70, 80)");
                        });

                    b.HasDiscriminator().HasValue("BigGameHuntingLicence");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.HuntingPermit", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Authorizations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Authorizations_HuntingPermit_Type_Enum", "[HuntingPermit_Type] IN (10, 20, 30, 40, 50, 60, 70, 80, 90)");

                            t.Property("Type")
                                .HasColumnName("HuntingPermit_Type");
                        });

                    b.HasDiscriminator().HasValue("HuntingPermit");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.HuntingSeal", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.Property<int?>("HuntedActivityId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasIndex("HuntedActivityId");

                    b.ToTable("Authorizations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Authorizations_HuntingSeal_Type_Enum", "[HuntingSeal_Type] IN (10, 20, 30, 40, 50, 60, 70, 80, 90)");

                            t.Property("Type")
                                .HasColumnName("HuntingSeal_Type");
                        });

                    b.HasDiscriminator().HasValue("HuntingSeal");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.OutfitterAssistantGuideLicence", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.ToTable("Authorizations", (string)null);

                    b.HasDiscriminator().HasValue("OutfitterAssistantGuideLicence");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.OutfitterChiefGuideLicence", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.ToTable("Authorizations", (string)null);

                    b.HasDiscriminator().HasValue("OutfitterChiefGuideLicence");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.PhaHuntingPermit", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.Property<string>("HuntCode")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Authorizations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Authorizations_PhaHuntingPermit_Type_Enum", "[PhaHuntingPermit_Type] IN (10, 20, 30, 40, 50, 60, 70)");

                            t.Property("Type")
                                .HasColumnName("PhaHuntingPermit_Type");
                        });

                    b.HasDiscriminator().HasValue("PhaHuntingPermit");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.SmallGameHuntingLicence", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Authorizations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Authorizations_SmallGameHuntingLicence_Type_Enum", "[SmallGameHuntingLicence_Type] IN (10, 20, 30, 40, 50, 60, 70, 80)");

                            t.Property("Type")
                                .HasColumnName("SmallGameHuntingLicence_Type");
                        });

                    b.HasDiscriminator().HasValue("SmallGameHuntingLicence");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.SpecialGuideLicence", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.Property<int>("GuidedClientId")
                        .HasColumnType("int");

                    b.HasIndex("GuidedClientId");

                    b.ToTable("Authorizations", (string)null);

                    b.HasDiscriminator().HasValue("SpecialGuideLicence");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.TrappingLicence", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Authorizations.Authorization");

                    b.Property<int>("RegisteredTrappingConcessionId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasIndex("RegisteredTrappingConcessionId");

                    b.ToTable("Authorizations", null, t =>
                        {
                            t.HasCheckConstraint("CK_Authorizations_TrappingLicence_Type_Enum", "[TrappingLicence_Type] IN (10, 20, 30, 40, 50, 60)");

                            t.Property("Type")
                                .HasColumnName("TrappingLicence_Type");
                        });

                    b.HasDiscriminator().HasValue("TrappingLicence");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.AmericanBlackBearBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<bool?>("IsSkullProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.Property<int?>("SkullCondition")
                        .HasColumnType("int");

                    b.Property<int?>("SkullLengthMillimetres")
                        .HasColumnType("int");

                    b.Property<int?>("SkullWidthMillimetres")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.HasCheckConstraint("CK_BioSubmissions_SkullCondition_Enum", "[SkullCondition] IN (10, 20, 30, 40)");
                        });

                    b.HasDiscriminator().HasValue("AmericanBlackBearBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.CanadaLynxBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<string>("FurbearerSealNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FurbearerSealNumber");

                    b.Property<bool?>("IsPeltProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.Property<int?>("PeltLengthMillimetres")
                        .HasColumnType("int");

                    b.Property<int?>("PeltWidthMillimetres")
                        .HasColumnType("int");

                    b.HasIndex("FurbearerSealNumber")
                        .IsUnique()
                        .HasFilter("[FurbearerSealNumber] IS NOT NULL");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[CanadaLynxBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.Property("MortalityId")
                                .HasColumnName("CanadaLynxBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("CanadaLynxBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.CaribouBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<bool?>("IsIncisorBarProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[CaribouBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.Property("MortalityId")
                                .HasColumnName("CaribouBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("CaribouBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.ElkBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<bool?>("IsHeadProvided")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHideProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[ElkBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.Property("MortalityId")
                                .HasColumnName("ElkBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("ElkBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.GreyWolfBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<string>("FurbearerSealNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FurbearerSealNumber");

                    b.Property<bool?>("IsPeltProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.Property<int?>("PeltColour")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[GreyWolfBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.HasCheckConstraint("CK_BioSubmissions_PeltColour_Enum", "[PeltColour] IN (10, 20, 30, 40)");

                            t.Property("IsPeltProvided")
                                .HasColumnName("GreyWolfBioSubmission_IsPeltProvided");

                            t.Property("MortalityId")
                                .HasColumnName("GreyWolfBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("GreyWolfBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.GrizzlyBearBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<bool?>("IsEvidenceOfSexAttached")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSkullProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.Property<int?>("SkullCondition")
                        .HasColumnType("int");

                    b.Property<int?>("SkullLengthMillimetres")
                        .HasColumnType("int");

                    b.Property<int?>("SkullWidthMillimetres")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[GrizzlyBearBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.HasCheckConstraint("CK_BioSubmissions_GrizzlyBearBioSubmission_SkullCondition_Enum", "[GrizzlyBearBioSubmission_SkullCondition] IN (10, 20, 30, 40)");

                            t.Property("IsSkullProvided")
                                .HasColumnName("GrizzlyBearBioSubmission_IsSkullProvided");

                            t.Property("MortalityId")
                                .HasColumnName("GrizzlyBearBioSubmission_MortalityId");

                            t.Property("SkullCondition")
                                .HasColumnName("GrizzlyBearBioSubmission_SkullCondition");

                            t.Property("SkullLengthMillimetres")
                                .HasColumnName("GrizzlyBearBioSubmission_SkullLengthMillimetres");

                            t.Property("SkullWidthMillimetres")
                                .HasColumnName("GrizzlyBearBioSubmission_SkullWidthMillimetres");
                        });

                    b.HasDiscriminator().HasValue("GrizzlyBearBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.MountainGoatBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<int?>("BroomedStatus")
                        .HasColumnType("int");

                    b.Property<int?>("HornBaseCircumferenceMillimetres")
                        .HasColumnType("int");

                    b.Property<int?>("HornMeasured")
                        .HasColumnType("int");

                    b.Property<int?>("HornTipSpreadMillimetres")
                        .HasColumnType("int");

                    b.Property<int?>("HornTotalLengthMillimetres")
                        .HasColumnType("int");

                    b.Property<bool?>("IsHeadProvided")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHornsProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[MountainGoatBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.HasCheckConstraint("CK_BioSubmissions_BroomedStatus_Enum", "[BroomedStatus] IN (10, 20, 30, 40)");

                            t.HasCheckConstraint("CK_BioSubmissions_HornMeasured_Enum", "[HornMeasured] IN (10, 20)");

                            t.Property("IsHeadProvided")
                                .HasColumnName("MountainGoatBioSubmission_IsHeadProvided");

                            t.Property("MortalityId")
                                .HasColumnName("MountainGoatBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("MountainGoatBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.MuleDeerBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<bool?>("IsAntlersProvided")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHeadProvided")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHideProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[MuleDeerBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.Property("IsHeadProvided")
                                .HasColumnName("MuleDeerBioSubmission_IsHeadProvided");

                            t.Property("IsHideProvided")
                                .HasColumnName("MuleDeerBioSubmission_IsHideProvided");

                            t.Property("MortalityId")
                                .HasColumnName("MuleDeerBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("MuleDeerBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.ThinhornSheepBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<int?>("BroomedStatus")
                        .HasColumnType("int");

                    b.Property<int?>("HornBaseCircumferenceMillimetres")
                        .HasColumnType("int");

                    b.Property<int?>("HornLengthToThirdAnnulusMillimetres")
                        .HasColumnType("int");

                    b.Property<int?>("HornMeasured")
                        .HasColumnType("int");

                    b.Property<int?>("HornTipSpreadMillimetres")
                        .HasColumnType("int");

                    b.Property<int?>("HornTotalLengthMillimetres")
                        .HasColumnType("int");

                    b.Property<bool?>("IsFullCurl")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHeadProvided")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHornsProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.Property<string>("PlugNumber")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[ThinhornSheepBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.HasCheckConstraint("CK_BioSubmissions_ThinhornSheepBioSubmission_BroomedStatus_Enum", "[ThinhornSheepBioSubmission_BroomedStatus] IN (10, 20, 30, 40)");

                            t.HasCheckConstraint("CK_BioSubmissions_ThinhornSheepBioSubmission_HornMeasured_Enum", "[ThinhornSheepBioSubmission_HornMeasured] IN (10, 20)");

                            t.Property("BroomedStatus")
                                .HasColumnName("ThinhornSheepBioSubmission_BroomedStatus");

                            t.Property("HornBaseCircumferenceMillimetres")
                                .HasColumnName("ThinhornSheepBioSubmission_HornBaseCircumferenceMillimetres");

                            t.Property("HornMeasured")
                                .HasColumnName("ThinhornSheepBioSubmission_HornMeasured");

                            t.Property("HornTipSpreadMillimetres")
                                .HasColumnName("ThinhornSheepBioSubmission_HornTipSpreadMillimetres");

                            t.Property("HornTotalLengthMillimetres")
                                .HasColumnName("ThinhornSheepBioSubmission_HornTotalLengthMillimetres");

                            t.Property("IsHeadProvided")
                                .HasColumnName("ThinhornSheepBioSubmission_IsHeadProvided");

                            t.Property("IsHornsProvided")
                                .HasColumnName("ThinhornSheepBioSubmission_IsHornsProvided");

                            t.Property("MortalityId")
                                .HasColumnName("ThinhornSheepBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("ThinhornSheepBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WhiteTailedDeerBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<bool?>("IsAntlersProvided")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHeadProvided")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHideProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[WhiteTailedDeerBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.Property("IsAntlersProvided")
                                .HasColumnName("WhiteTailedDeerBioSubmission_IsAntlersProvided");

                            t.Property("IsHeadProvided")
                                .HasColumnName("WhiteTailedDeerBioSubmission_IsHeadProvided");

                            t.Property("IsHideProvided")
                                .HasColumnName("WhiteTailedDeerBioSubmission_IsHideProvided");

                            t.Property("MortalityId")
                                .HasColumnName("WhiteTailedDeerBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("WhiteTailedDeerBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WolverineBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<string>("FurbearerSealNumber")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FurbearerSealNumber");

                    b.Property<bool?>("IsPeltProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[WolverineBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.Property("IsPeltProvided")
                                .HasColumnName("WolverineBioSubmission_IsPeltProvided");

                            t.Property("MortalityId")
                                .HasColumnName("WolverineBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("WolverineBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WoodBisonBioSubmission", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission");

                    b.Property<bool?>("IsIncisorBarProvided")
                        .HasColumnType("bit");

                    b.Property<int>("MortalityId")
                        .HasColumnType("int");

                    b.HasIndex("MortalityId")
                        .IsUnique()
                        .HasFilter("[WoodBisonBioSubmission_MortalityId] IS NOT NULL");

                    b.ToTable("BioSubmissions", null, t =>
                        {
                            t.HasCheckConstraint("CK_BioSubmissions_AnalysisStatus_Enum", "[AnalysisStatus] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_BioSubmissions_RequiredOrganicMaterialsStatus_Enum", "[RequiredOrganicMaterialsStatus] IN (10, 20, 30, 40)");

                            t.Property("IsIncisorBarProvided")
                                .HasColumnName("WoodBisonBioSubmission_IsIncisorBarProvided");

                            t.Property("MortalityId")
                                .HasColumnName("WoodBisonBioSubmission_MortalityId");
                        });

                    b.HasDiscriminator().HasValue("WoodBisonBioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.AmericanBeaverMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("AmericanBeaverMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.AmericanBlackBearMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.Property<bool>("IsShotInConflict")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("IsShotInConflict");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("AmericanBlackBearMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.AmericanMartenMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("AmericanMartenMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.AmericanMinkMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("AmericanMinkMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.ArcticFoxMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("ArcticFoxMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.ArcticGroundSquirrelMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("ArcticGroundSquirrelMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.BushyTailedWoodratMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("BushyTailedWoodratMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.CanadaLynxMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("CanadaLynxMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.CaribouMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.Property<int>("Herd")
                        .HasColumnType("int")
                        .HasColumnName("CaribouHerd");

                    b.ToTable("Mortalities", null, t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_Mortalities_CaribouHerd_Enum", "[CaribouHerd] IN (10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300)");
                        });

                    b.HasDiscriminator().HasValue("CaribouMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.CollaredPikaMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("CollaredPikaMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.CougarMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("CougarMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.CoyoteMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("CoyoteMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.DuskyGrouseMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("DuskyGrouseMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.ElkMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.Property<int>("Herd")
                        .HasColumnType("int")
                        .HasColumnName("ElkHerd");

                    b.ToTable("Mortalities", null, t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_Mortalities_ElkHerd_Enum", "[ElkHerd] IN (10, 20)");
                        });

                    b.HasDiscriminator().HasValue("ElkMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.ErmineMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("ErmineMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.FisherMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("FisherMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.GreyWolfMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("GreyWolfMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.GrizzlyBearMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.Property<bool>("IsShotInConflict")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("bit")
                        .HasColumnName("IsShotInConflict");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("GrizzlyBearMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.GrouseMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("GrouseMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.HoaryMarmotMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("HoaryMarmotMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.LeastChipmunkMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("LeastChipmunkMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.LeastWeaselMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("LeastWeaselMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.LemmingMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("LemmingMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.LittleBrownBatMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("LittleBrownBatMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.MeadowJumpingMouseMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("MeadowJumpingMouseMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.MooseMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("MooseMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.MountainGoatMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("MountainGoatMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.MuleDeerMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("MuleDeerMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.MuskoxMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("MuskoxMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.MuskratMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("MuskratMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.NorthAmericanDeerMouseMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("NorthAmericanDeerMouseMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.NorthAmericanPorcupineMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("NorthAmericanPorcupineMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.NorthernFlyingSquirrelMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("NorthernFlyingSquirrelMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.NorthernLongEaredBatMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("NorthernLongEaredBatMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.NorthernRiverOtterMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("NorthernRiverOtterMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.OtherBirdMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("OtherBirdMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.PolarBearMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("PolarBearMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.RedFoxMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("RedFoxMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.RedSquirrelMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("RedSquirrelMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.RockPtarmiganMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("RockPtarmiganMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.RuffedGrouseMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("RuffedGrouseMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.SharpTailedGrouseMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("SharpTailedGrouseMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.ShrewMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("ShrewMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.SnowshoeHareMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("SnowshoeHareMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.SpruceGrouseMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("SpruceGrouseMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.ThinhornSheepMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.Property<int>("BodyColour")
                        .HasColumnType("int");

                    b.Property<int>("TailColour")
                        .HasColumnType("int");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_Mortalities_BodyColour_Enum", "[BodyColour] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_Mortalities_TailColour_Enum", "[TailColour] IN (10, 20)");
                        });

                    b.HasDiscriminator().HasValue("ThinhornSheepMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.VoleMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("VoleMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WhiteTailedDeerMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("WhiteTailedDeerMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WhiteTailedPtarmiganMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("WhiteTailedPtarmiganMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WillowPtarmiganMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("WillowPtarmiganMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WolverineMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("WolverineMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WoodBisonMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.Property<bool>("IsWounded")
                        .HasColumnType("bit");

                    b.Property<int?>("PregnancyStatus")
                        .HasColumnType("int");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");

                            t.HasCheckConstraint("CK_Mortalities_PregnancyStatus_Enum", "[PregnancyStatus] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("WoodBisonMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WoodchuckMortality", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Mortalities.Mortality");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Mortalities_Family_Enum", "[Family] IN (10)");

                            t.HasCheckConstraint("CK_Mortalities_Sex_Enum", "[Sex] IN (10, 20, 30)");
                        });

                    b.HasDiscriminator().HasValue("WoodchuckMortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.People.ConservationOfficer", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.People.Person");

                    b.Property<string>("BadgeNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("LastName");

                    b.HasIndex("BadgeNumber")
                        .IsUnique()
                        .HasFilter("[BadgeNumber] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ConservationOfficer");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.People.PersonWithAuthorizations", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.People.Person");

                    b.Property<string>("EnvPersonId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasDiscriminator().HasValue("PersonWithAuthorizations");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.HumanWildlifeConflictMortalityReport", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.Report");

                    b.Property<int>("ConservationOfficerId")
                        .HasColumnType("int");

                    b.Property<string>("HumanWildlifeConflictNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasIndex("ConservationOfficerId");

                    b.ToTable("Reports", (string)null);

                    b.HasDiscriminator().HasValue("HumanWildlifeConflictMortalityReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.OutfitterGuidedHuntReport", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.Report");

                    b.Property<int>("ChiefGuideId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HuntEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HuntStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OutfitterAreaId")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.HasIndex("ChiefGuideId");

                    b.HasIndex("ClientId");

                    b.HasIndex("OutfitterAreaId");

                    b.ToTable("Reports", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reports_OutfitterGuidedHuntReport_Result_Enum", "[OutfitterGuidedHuntReport_Result] IN (10, 20, 30)");

                            t.Property("ClientId")
                                .HasColumnName("OutfitterGuidedHuntReport_ClientId");

                            t.Property("HuntEndDate")
                                .HasColumnName("OutfitterGuidedHuntReport_HuntEndDate");

                            t.Property("HuntStartDate")
                                .HasColumnName("OutfitterGuidedHuntReport_HuntStartDate");

                            t.Property("Result")
                                .HasColumnName("OutfitterGuidedHuntReport_Result");
                        });

                    b.HasDiscriminator().HasValue("OutfitterGuidedHuntReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.SpecialGuidedHuntReport", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.Report");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("GuideId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("HuntEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("HuntStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.HasIndex("ClientId");

                    b.HasIndex("GuideId");

                    b.ToTable("Reports", null, t =>
                        {
                            t.HasCheckConstraint("CK_Reports_Result_Enum", "[Result] IN (10, 20, 30)");

                            t.Property("ClientId")
                                .HasColumnName("SpecialGuidedHuntReport_ClientId");
                        });

                    b.HasDiscriminator().HasValue("SpecialGuidedHuntReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.TrappedMortalitiesReport", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.Report");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("RegisteredTrappingConcessionId")
                        .HasColumnType("int");

                    b.HasIndex("ClientId");

                    b.HasIndex("RegisteredTrappingConcessionId");

                    b.ToTable("Reports", (string)null);

                    b.HasDiscriminator().HasValue("TrappedMortalitiesReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.CollaredMortalityReport", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.Report");

                    b.Property<string>("CollarNumber")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.ToTable("Reports", (string)null);

                    b.HasDiscriminator().HasValue("CollaredMortalityReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.IndividualHuntedMortalityReport", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.Report");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasIndex("ClientId");

                    b.HasIndex("PersonId");

                    b.ToTable("Reports", null, t =>
                        {
                            t.Property("ClientId")
                                .HasColumnName("IndividualHuntedMortalityReport_ClientId");
                        });

                    b.HasDiscriminator().HasValue("IndividualHuntedMortalityReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.ResearchMortalityReport", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.Report");

                    b.ToTable("Reports", (string)null);

                    b.HasDiscriminator().HasValue("ResearchMortalityReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.CollaredActivity", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasIndex("ReportId")
                        .IsUnique()
                        .HasFilter("[ReportId] IS NOT NULL");

                    b.ToTable("Activities", (string)null);

                    b.HasDiscriminator().HasValue("CollaredActivity");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.HumanWildlifeConflictActivity", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasIndex("ReportId");

                    b.ToTable("Activities", null, t =>
                        {
                            t.Property("ReportId")
                                .HasColumnName("HumanWildlifeConflictActivity_ReportId");
                        });

                    b.HasDiscriminator().HasValue("HumanWildlifeConflictActivity");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.HuntedActivity", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity");

                    b.Property<int>("GameManagementAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("IndividualHuntedMortalityReportId")
                        .HasColumnType("int");

                    b.Property<string>("Landmark")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("OutfitterGuidedHuntReportId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialGuidedHuntReportId")
                        .HasColumnType("int");

                    b.HasIndex("GameManagementAreaId");

                    b.HasIndex("IndividualHuntedMortalityReportId")
                        .IsUnique()
                        .HasFilter("[IndividualHuntedMortalityReportId] IS NOT NULL");

                    b.HasIndex("OutfitterGuidedHuntReportId");

                    b.HasIndex("SpecialGuidedHuntReportId");

                    b.ToTable("Activities", (string)null);

                    b.HasDiscriminator().HasValue("HuntedActivity");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.ResearchActivity", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity");

                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.HasIndex("ReportId")
                        .IsUnique()
                        .HasFilter("[ReportId] IS NOT NULL");

                    b.ToTable("Activities", null, t =>
                        {
                            t.Property("ReportId")
                                .HasColumnName("ResearchActivity_ReportId");
                        });

                    b.HasDiscriminator().HasValue("ResearchActivity");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.TrappedActivity", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity");

                    b.Property<int>("TrappedMortalitiesReportId")
                        .HasColumnType("int");

                    b.HasIndex("TrappedMortalitiesReportId");

                    b.ToTable("Activities", (string)null);

                    b.HasDiscriminator().HasValue("TrappedActivity");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Seasons.CalendarSeason", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Season");

                    b.HasIndex("StartDate", "EndDate")
                        .IsUnique();

                    b.ToTable("Seasons", (string)null);

                    b.HasDiscriminator().HasValue("CalendarSeason");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Seasons.HuntingSeason", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Season");

                    b.HasIndex("StartDate", "EndDate")
                        .IsUnique();

                    b.ToTable("Seasons", (string)null);

                    b.HasDiscriminator().HasValue("HuntingSeason");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Seasons.TrappingSeason", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.Season");

                    b.HasIndex("StartDate", "EndDate")
                        .IsUnique();

                    b.ToTable("Seasons", (string)null);

                    b.HasDiscriminator().HasValue("TrappingSeason");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.People.Client", b =>
                {
                    b.HasBaseType("WildlifeMortalities.Data.Entities.People.PersonWithAuthorizations");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("LastName");

                    b.HasIndex("EnvPersonId")
                        .IsUnique()
                        .HasFilter("[EnvPersonId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("AssistantGuideOutfitterGuidedHuntReport", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.Client", null)
                        .WithMany()
                        .HasForeignKey("AssistantGuidesId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.OutfitterGuidedHuntReport", null)
                        .WithMany()
                        .HasForeignKey("OutfitterGuidedHuntReportsAsAssistantGuideId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BigGameHuntingLicenceOutfitterArea", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Authorizations.BigGameHuntingLicence", null)
                        .WithMany()
                        .HasForeignKey("BigGameHuntingLicencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.OutfitterArea", null)
                        .WithMany()
                        .HasForeignKey("OutfitterAreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutfitterAreaOutfitterAssistantGuideLicence", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.OutfitterArea", null)
                        .WithMany()
                        .HasForeignKey("OutfitterAreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Authorizations.OutfitterAssistantGuideLicence", null)
                        .WithMany()
                        .HasForeignKey("OutfitterAssistantGuideLicencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutfitterAreaOutfitterChiefGuideLicence", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.OutfitterArea", null)
                        .WithMany()
                        .HasForeignKey("OutfitterAreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Authorizations.OutfitterChiefGuideLicence", null)
                        .WithMany()
                        .HasForeignKey("OutfitterChiefGuideLicencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutfitterAreaSmallGameHuntingLicence", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.OutfitterArea", null)
                        .WithMany()
                        .HasForeignKey("OutfitterAreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Authorizations.SmallGameHuntingLicence", null)
                        .WithMany()
                        .HasForeignKey("SmallGameHuntingLicencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.Authorization", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity", null)
                        .WithMany("Authorizations")
                        .HasForeignKey("ActivityId");

                    b.HasOne("WildlifeMortalities.Data.Entities.People.PersonWithAuthorizations", "Person")
                        .WithMany("Authorizations")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Season", "Season")
                        .WithMany("Authorizations")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.InvalidAuthorization", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.Navigation("Person");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.BioSubmission", b =>
                {
                    b.OwnsOne("WildlifeMortalities.Data.Entities.BiologicalSubmissions.Age", "Age", b1 =>
                        {
                            b1.Property<int>("BioSubmissionId")
                                .HasColumnType("int");

                            b1.Property<int>("Confidence")
                                .HasColumnType("int");

                            b1.Property<int>("Years")
                                .HasColumnType("int");

                            b1.HasKey("BioSubmissionId");

                            b1.ToTable("BioSubmissions", t =>
                                {
                                    t.HasCheckConstraint("CK_BioSubmissions_Age_Confidence_Enum", "[Age_Confidence] IN (10, 20, 30)");
                                });

                            b1.WithOwner()
                                .HasForeignKey("BioSubmissionId");
                        });

                    b.Navigation("Age");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.Mortality", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity", "Activity")
                        .WithOne("Mortality")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.Mortalities.Mortality", "ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.DraftReport", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.Person", "Person")
                        .WithMany("DraftReports")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.Report", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Users.User", "CreatedBy")
                        .WithMany("CreatedReports")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Users.User", "LastModifiedBy")
                        .WithMany("ModifiedReports")
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("WildlifeMortalities.Data.Entities.Season", "Season")
                        .WithMany("Reports")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Violation", null)
                        .WithMany("Reports")
                        .HasForeignKey("ViolationId");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.ReportPdf", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.Report", "Report")
                        .WithOne("Pdf")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.Reports.ReportPdf", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Users.User", b =>
                {
                    b.OwnsOne("WildlifeMortalities.Data.Entities.Users.UserSettings", "Settings", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<bool>("IsDarkMode")
                                .HasColumnType("bit");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Settings")
                        .IsRequired();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Violation", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity", null)
                        .WithMany("Violations")
                        .HasForeignKey("ActivityId");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.HuntingSeal", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.SingleMortality.HuntedActivity", "HuntedActivity")
                        .WithMany()
                        .HasForeignKey("HuntedActivityId");

                    b.Navigation("HuntedActivity");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.SpecialGuideLicence", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.Client", "GuidedClient")
                        .WithMany("SpecialGuideLicencesAsClient")
                        .HasForeignKey("GuidedClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GuidedClient");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Authorizations.TrappingLicence", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.RegisteredTrappingConcession", "RegisteredTrappingConcession")
                        .WithMany("TrappingLicences")
                        .HasForeignKey("RegisteredTrappingConcessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredTrappingConcession");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.AmericanBlackBearBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.AmericanBlackBearMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.AmericanBlackBearBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.CanadaLynxBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.CanadaLynxMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.CanadaLynxBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.CaribouBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.CaribouMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.CaribouBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.ElkBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.ElkMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.ElkBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.GreyWolfBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.GreyWolfMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.GreyWolfBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.GrizzlyBearBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.GrizzlyBearMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.GrizzlyBearBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.MountainGoatBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.MountainGoatMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.MountainGoatBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsMany("WildlifeMortalities.Data.Entities.BiologicalSubmissions.Shared.HornMeasurementEntry", "HornMeasurementEntries", b1 =>
                        {
                            b1.Property<int>("MountainGoatBioSubmissionId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Annulus")
                                .HasColumnType("int");

                            b1.Property<int>("CircumferenceMillimetres")
                                .HasColumnType("int");

                            b1.Property<int>("LengthMillimetres")
                                .HasColumnType("int");

                            b1.HasKey("MountainGoatBioSubmissionId", "Id");

                            b1.ToTable("BioSubmissions");

                            b1.ToJson("MountainGoatBioSubmission_HornMeasurementEntries");

                            b1.WithOwner()
                                .HasForeignKey("MountainGoatBioSubmissionId");
                        });

                    b.Navigation("HornMeasurementEntries");

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.MuleDeerBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.MuleDeerMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.MuleDeerBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.ThinhornSheepBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.ThinhornSheepMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.ThinhornSheepBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.OwnsMany("WildlifeMortalities.Data.Entities.BiologicalSubmissions.Shared.HornMeasurementEntry", "HornMeasurementEntries", b1 =>
                        {
                            b1.Property<int>("ThinhornSheepBioSubmissionId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<int>("Annulus")
                                .HasColumnType("int");

                            b1.Property<int>("CircumferenceMillimetres")
                                .HasColumnType("int");

                            b1.Property<int>("LengthMillimetres")
                                .HasColumnType("int");

                            b1.HasKey("ThinhornSheepBioSubmissionId", "Id");

                            b1.ToTable("BioSubmissions");

                            b1.ToJson("ThinhornSheepBioSubmission_HornMeasurementEntries");

                            b1.WithOwner()
                                .HasForeignKey("ThinhornSheepBioSubmissionId");
                        });

                    b.Navigation("HornMeasurementEntries");

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WhiteTailedDeerBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.WhiteTailedDeerMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WhiteTailedDeerBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WolverineBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.WolverineMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WolverineBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WoodBisonBioSubmission", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Mortalities.WoodBisonMortality", "Mortality")
                        .WithOne("BioSubmission")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.BiologicalSubmissions.WoodBisonBioSubmission", "MortalityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Mortality");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.HumanWildlifeConflictMortalityReport", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.ConservationOfficer", "ConservationOfficer")
                        .WithMany("HumanWildlifeConflictReports")
                        .HasForeignKey("ConservationOfficerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConservationOfficer");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.OutfitterGuidedHuntReport", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.Client", "ChiefGuide")
                        .WithMany("OutfitterGuidedHuntReportsAsChiefGuide")
                        .HasForeignKey("ChiefGuideId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.People.Client", "Client")
                        .WithMany("OutfitterGuidedHuntReportsAsClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.OutfitterArea", "OutfitterArea")
                        .WithMany()
                        .HasForeignKey("OutfitterAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChiefGuide");

                    b.Navigation("Client");

                    b.Navigation("OutfitterArea");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.SpecialGuidedHuntReport", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.Client", "Client")
                        .WithMany("SpecialGuidedHuntReportsAsClient")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.People.Client", "Guide")
                        .WithMany("SpecialGuidedHuntReportsAsGuide")
                        .HasForeignKey("GuideId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Guide");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.TrappedMortalitiesReport", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.Client", "Client")
                        .WithMany("TrappedMortalitiesReports")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.RegisteredTrappingConcession", "RegisteredTrappingConcession")
                        .WithMany()
                        .HasForeignKey("RegisteredTrappingConcessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("RegisteredTrappingConcession");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.IndividualHuntedMortalityReport", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.People.Client", null)
                        .WithMany("IndividualHuntedMortalityReports")
                        .HasForeignKey("ClientId");

                    b.HasOne("WildlifeMortalities.Data.Entities.People.PersonWithAuthorizations", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.CollaredActivity", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.SingleMortality.CollaredMortalityReport", "Report")
                        .WithOne("Activity")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.Reports.SingleMortality.CollaredActivity", "ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.HumanWildlifeConflictActivity", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.HumanWildlifeConflictMortalityReport", "Report")
                        .WithMany("ConflictActivities")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.HuntedActivity", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.GameManagementArea", "GameManagementArea")
                        .WithMany()
                        .HasForeignKey("GameManagementAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.SingleMortality.IndividualHuntedMortalityReport", "IndividualHuntedMortalityReport")
                        .WithOne("HuntedActivity")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.Reports.SingleMortality.HuntedActivity", "IndividualHuntedMortalityReportId");

                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.OutfitterGuidedHuntReport", "OutfitterGuidedHuntReport")
                        .WithMany("HuntedActivities")
                        .HasForeignKey("OutfitterGuidedHuntReportId");

                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.SpecialGuidedHuntReport", "SpecialGuidedHuntReport")
                        .WithMany("HuntedActivities")
                        .HasForeignKey("SpecialGuidedHuntReportId");

                    b.Navigation("GameManagementArea");

                    b.Navigation("IndividualHuntedMortalityReport");

                    b.Navigation("OutfitterGuidedHuntReport");

                    b.Navigation("SpecialGuidedHuntReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.ResearchActivity", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.SingleMortality.ResearchMortalityReport", "Report")
                        .WithOne("Activity")
                        .HasForeignKey("WildlifeMortalities.Data.Entities.Reports.SingleMortality.ResearchActivity", "ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.TrappedActivity", b =>
                {
                    b.HasOne("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.TrappedMortalitiesReport", "TrappedMortalitiesReport")
                        .WithMany("TrappedActivities")
                        .HasForeignKey("TrappedMortalitiesReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TrappedMortalitiesReport");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.People.Person", b =>
                {
                    b.Navigation("DraftReports");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.RegisteredTrappingConcession", b =>
                {
                    b.Navigation("TrappingLicences");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.Report", b =>
                {
                    b.Navigation("Pdf");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.Activity", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Mortality")
                        .IsRequired();

                    b.Navigation("Violations");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Season", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Users.User", b =>
                {
                    b.Navigation("CreatedReports");

                    b.Navigation("ModifiedReports");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Violation", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.AmericanBlackBearMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.CanadaLynxMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.CaribouMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.ElkMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.GreyWolfMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.GrizzlyBearMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.MountainGoatMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.MuleDeerMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.ThinhornSheepMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WhiteTailedDeerMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WolverineMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Mortalities.WoodBisonMortality", b =>
                {
                    b.Navigation("BioSubmission");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.People.ConservationOfficer", b =>
                {
                    b.Navigation("HumanWildlifeConflictReports");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.People.PersonWithAuthorizations", b =>
                {
                    b.Navigation("Authorizations");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.HumanWildlifeConflictMortalityReport", b =>
                {
                    b.Navigation("ConflictActivities");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.OutfitterGuidedHuntReport", b =>
                {
                    b.Navigation("HuntedActivities");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.SpecialGuidedHuntReport", b =>
                {
                    b.Navigation("HuntedActivities");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.MultipleMortalities.TrappedMortalitiesReport", b =>
                {
                    b.Navigation("TrappedActivities");
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.CollaredMortalityReport", b =>
                {
                    b.Navigation("Activity")
                        .IsRequired();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.IndividualHuntedMortalityReport", b =>
                {
                    b.Navigation("HuntedActivity")
                        .IsRequired();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.Reports.SingleMortality.ResearchMortalityReport", b =>
                {
                    b.Navigation("Activity")
                        .IsRequired();
                });

            modelBuilder.Entity("WildlifeMortalities.Data.Entities.People.Client", b =>
                {
                    b.Navigation("IndividualHuntedMortalityReports");

                    b.Navigation("OutfitterGuidedHuntReportsAsChiefGuide");

                    b.Navigation("OutfitterGuidedHuntReportsAsClient");

                    b.Navigation("SpecialGuideLicencesAsClient");

                    b.Navigation("SpecialGuidedHuntReportsAsClient");

                    b.Navigation("SpecialGuidedHuntReportsAsGuide");

                    b.Navigation("TrappedMortalitiesReports");
                });
#pragma warning restore 612, 618
        }
    }
}
