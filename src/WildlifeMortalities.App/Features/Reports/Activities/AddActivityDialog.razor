@implements IDisposable

<EditForm EditContext="_context" OnInvalidSubmit="@(() => _invalidSubmissionDetected = true)" OnValidSubmit="Add" onkeypress="preventEnterFromSubmitting(event)">

    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Add mortality
            </MudText>
        </TitleContent>
        <DialogContent>
            <FluentValidationValidator/>
            @*<ValidationSummary/>*@
            <CascadingValue Value="ReportType" Name="@Constants.CascadingValues.ReportType">
                <ActivityComponent ViewModel="_vm"/>
            </CascadingValue>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            @if (_context.GetValidationMessages().Any())
            {
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Button" OnClick="AddDraft">Save as draft</MudButton>
            }
            <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Disabled="_context.GetValidationMessages().Any()">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private EditContext _context = null!;
    private bool _invalidSubmissionDetected;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    private ActivityViewModel _vm = null!;

    [Parameter]
    [EditorRequired]
    public ReportType ReportType { get; set; }

    protected override void OnInitialized()
    {
        _vm = ReportType switch
        {
            ReportType.TrappedMortalitiesReport => new TrappedActivityViewModel(),
            ReportType.IndividualHuntedMortalityReport or ReportType.SpecialGuidedHuntReport or ReportType.OutfitterGuidedHuntReport => new HuntedActivityViewModel(),
            _ => throw new NotImplementedException()
            };
        _context = new EditContext(_vm);
        _context.OnFieldChanged += OnFieldChanged;
        base.OnInitialized();
    }

    private void OnFieldChanged(object? sender, FieldChangedEventArgs args)
    {
        if (args.FieldIdentifier.FieldName != nameof(_vm.MortalityWithSpeciesSelectionViewModel.Species) && _invalidSubmissionDetected)
        {
            _context.Validate();
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Add()
    {
        if (_context.Validate())
        {
            _vm.MortalityWithSpeciesSelectionViewModel.MortalityViewModel.IsDraft = false;
            MudDialog.Close(DialogResult.Ok(_vm));
        }
    }

    private void AddDraft()
    {
        _vm.MortalityWithSpeciesSelectionViewModel.MortalityViewModel.IsDraft = true;
        MudDialog.Close(DialogResult.Ok(_vm));
    }

    public void Dispose()
    {
        if (_context != null)
        {
            _context.OnFieldChanged -= OnFieldChanged;
        }
    }

}
