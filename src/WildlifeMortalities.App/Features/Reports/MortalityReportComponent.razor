@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Data.Entities.Authorizations;
@using WildlifeMortalities.Data.Entities.Users;
@using WildlifeMortalities.Shared.Extensions;
@inherits DbContextAwareComponent

@if (_vm == null)
{
    <MudProgressCircular Indeterminate="true" />
    return;
}

@if (_personId == 0)
{
    <MudAlert Severity="Severity.Error">No person with that Id was found.</MudAlert>

    return;
}


<MudText Typo="Typo.h3" Class="mb-4">@_vm.SelectedReportType?.GetDisplayName()</MudText>

<MudGrid>
    <MudItem xs="12" sm="9">
        <EditForm OnValidSubmit="SubmitReport" OnInvalidSubmit="@(() => _invalidSubmitDetected = true)" EditContext="_editContext" onkeypress="preventEnterFromSubmitting(event)">
            <FluentValidationValidator />
            @if (_vm.IsUpdate)
            {
                if (!string.IsNullOrWhiteSpace(_vm.ReportViewModel.HumanReadableId))
                {
                    <MudText Typo="Typo.h5" Class="mb-2">@_vm.ReportViewModel.HumanReadableId</MudText>
                }
            }
             else
            {
                <MudSelect T="ReportType?" @bind-Value="_vm.SelectedReportType" @bind-Value:after="ReportTypeChanged" For="@(() => _vm.SelectedReportType)" Label="Mortality report type" Placeholder="Select a report type">
                    @foreach (ReportType reportType in Enum.GetValues<ReportType>().Where(x => x.IsCreatable()))
                    {
                        <MudSelectItem Value="@reportType" T="ReportType?">@reportType.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
                @if(_vm.SelectedReportType is ReportType.IndividualHuntedMortalityReport && _client!.IsCurrentlyAYukonResident() == false)
                {
                    <MudAlert Severity="Severity.Warning">This client does not have a valid Yukon resident hunting licence. If you didn't intend to create a resident hunt report, please change the report type above.</MudAlert>
                } else if (_vm.SelectedReportType is ReportType.SpecialGuidedHuntReport && _client!.Authorizations.OfType<BigGameHuntingLicence>().Any(a => a.IsValid(DateTimeOffset.Now) && a.Type is BigGameHuntingLicence.LicenceType.CanadianResidentSpecialGuided) == false){
                    <MudAlert Severity="Severity.Warning">This client does not have a valid Canadian resident special guided hunting licence. If you didn't intend to create a special guided hunt report, please change the report type above.</MudAlert>
                }
            }

            @if(_vm.SelectedReportType == null)
            {
                return;
            }

            <MudDatePicker @bind-Date="_vm.ReportViewModel.DateSubmitted" Label="Date submitted" For="(() => _vm.ReportViewModel.DateSubmitted)" DateFormat="@Constants.FormatStrings.StandardDateFormat" />
            <CascadingValue Name="@Constants.CascadingValues.EditMode" Value="@_vm.IsUpdate" IsFixed="true">
                <CascadingValue Name="@Constants.CascadingValues.ReportViewModel" Value="_vm.ReportViewModel">
                    @switch (_vm.SelectedReportType)
                    {
                        case ReportType.IndividualHuntedMortalityReport:
                            <IndividualHuntedMortalityReportComponent ViewModel="@(_vm.ReportViewModel as IndividualHuntedMortalityReportViewModel)" />
                            break;
                        case ReportType.OutfitterGuidedHuntReport:
                            <OutfitterGuidedHuntReportComponent ViewModel="@(_vm.ReportViewModel as OutfitterGuidedHuntReportViewModel)" />
                            break;
                        case ReportType.SpecialGuidedHuntReport:
                            <SpecialGuidedHuntReportComponent ViewModel="@(_vm.ReportViewModel as SpecialGuidedHuntReportViewModel)" />
                            break;
                        case ReportType.TrappedMortalitiesReport:
                            <TrappedReportComponent ViewModel="@(_vm.ReportViewModel as TrappedReportViewModel)" />
                            break;
                        default:
                            throw new NotImplementedException("Report type not recognized.");
                    }
                </CascadingValue>
            </CascadingValue>

            @*<MudPaper Elevation="0" Class="mt-4">
            <MudText Typo="Typo.h6">Signature</MudText>
            <SignaturePadComponent @ref="_signaturePad"/>
            </MudPaper>

            <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple/>

            <MudButton HtmlTag="label"
            Variant="Variant.Filled"
            Color="Color.Info"
            StartIcon="@Icons.Material.Filled.CloudUpload"
            for="fileInput"
            Class="mt-4">
            Attach Files
            </MudButton>

            @if (_files.Count != 0)
            {
            <MudText Typo="@Typo.h6">@_files.Count() File@(_files.Count() == 1 ? "" : "s"):</MudText>
            <MudList>
            @foreach (var file in _files)
            {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
            @file.Name <code>@file.Size bytes</code>
            </MudListItem>
            }
            </MudList>
            }*@

            <MudStack Row="true" Class="mt-4">
                <MudSpacer />
                @if (_editContext.GetValidationMessages().Any() && ReportId == null)
                {
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" OnClick="CreateDraftReport" Color="Color.Primary">
                        @if (_isSaving)
                        {
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                        }
                        else
                        {
                            <span>Save as draft</span>
                        }
                    </MudButton>
                }

                <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Disabled="@(_editContext.GetValidationMessages().Any())">
                    @if (_isSaving)
                    {
                        <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                    }
                    else
                    {
                        @((ReportId == null ? "Create report" : "Update report"))
                    }
                </MudButton>
            </MudStack>
        </EditForm>
    </MudItem>

    @if (_client != null)
    {
        <MudItem xs="12" sm="3">
            <MudPaper Class="pa-4 flex-auto">
                <MudText Typo="Typo.h6">Client</MudText>
                <ClientDetails Client="@_client" />
            </MudPaper>
        </MudItem>
    }
</MudGrid>
