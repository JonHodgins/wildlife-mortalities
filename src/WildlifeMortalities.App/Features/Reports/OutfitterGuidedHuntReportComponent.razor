@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Reports.Activities
@using WildlifeMortalities.Data.Entities
@using WildlifeMortalities.Data.Entities.People
@using WildlifeMortalities.Data.Enums
@using WildlifeMortalities.Shared.Extensions;
@using WildlifeMortalities.Shared.Services
<DateRangePickerComponent Label="Hunting dates" @bind-DateRange="ViewModel.HuntingDateRange" For="@( () => ViewModel.HuntingDateRange)" />
<MudAutocomplete T="OutfitterArea" Label="Outfitter Area" @bind-Value="ViewModel.OutfitterArea" SearchFunc="SearchOutfitterAreas"
                 ToStringFunc="@(x => x == null ? string.Empty : x.Area)" MaxItems="null" Placeholder="Select an outfitter area" For="@(() => ViewModel.OutfitterArea)"/>

<MudPaper Class="pa-4 my-4">
    <MudAutocomplete T="Client" For="@(() => ViewModel.ChiefGuide)" Label="Chief guide" Placeholder="Search by client id or last name" MinCharacters="2"
                     @bind-Value="ViewModel.ChiefGuide" ToStringFunc="@(x => x is null ? "" : $"{x.EnvClientId} | {x.LastName}")" SearchFunc="@SearchClientByEnvClientIdOrLastName"
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Class="mb-6">
    </MudAutocomplete>
    @if(ViewModel.AssistantGuides.Count < _maxAssistantGuides)
    {
        <MudAutocomplete T="Client" @key="ViewModel.AssistantGuides.Count" Label="Add assistant guide(s)" Placeholder="Search by client id or last name" MinCharacters="2"
                         @bind-Value="ViewModel.SelectedAssistantGuide" @bind-Value:after="AddAssistantGuide" ToStringFunc="@(x => x is null ? "" : $"{x.EnvClientId} | {x.FirstName} {x.LastName}")" SearchFunc="@SearchClientByEnvClientIdOrLastName"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Class="mb-6">
        </MudAutocomplete>
    }

    <MudList>
        @foreach (var item in ViewModel.AssistantGuides)
        {
            <MudListItem>
                <MudStack Row="true">
                    <MudField DisableUnderLine="true" Label="Assistant guide">@item</MudField>
                    <MudSpacer/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteGuide(item))"/>
                </MudStack>
            </MudListItem>
        }
    </MudList>
    <!--suppress CssUnresolvedCustomProperty -->
    <ValidationMessage For="@(() => ViewModel.AssistantGuides)" Style="font-size: 12px; color: var(--mud-palette-error);"/>
</MudPaper>

<MudSelect T="GuidedHuntResult?" @bind-Value="@ViewModel.Result" Label="Result" Placeholder="Select a result" For="@(() => ViewModel.Result)">
    @foreach (var item in Enum.GetValues<GuidedHuntResult>())
    {
        <MudSelectItem T="GuidedHuntResult?" Value="@item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
@if (ViewModel.Result is GuidedHuntResult.WentHuntingAndKilledWildlife)
{
    <MudGrid Class="my-3">
        @foreach (var item in ViewModel.HuntedActivityViewModels)
        {
            <MudItem md="2" xs="6">
                <ActivityCardComponent EnableBioSubmission="false"
                                       OnEditClicked="@(() => Edit(item))" EnableDelete="true" EnableEdit="true"
                                       ActivityViewModel="item"
                                       OnDeleteClicked="@(() => Delete(item))"/>
            </MudItem>
        }
    </MudGrid>
    <MudStack Row="true">
        <MudSpacer/>
        <MudItem>
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" OnClick="Add" Size="Size.Medium" Color="Color.Tertiary">Add mortality</MudButton>
            <ValidationMessage For="@(() => ViewModel.HuntedActivityViewModels)" Style="font-size: 12px; color: var(--mud-palette-error);" />
        </MudItem>
        <MudSpacer/>
    </MudStack>
}

@code {
    private bool HasRangeError()
    {
        var messages=  EditContext.GetValidationMessages( () => ViewModel.HuntingDateRange);
        return messages.Any();
    }

    private string? GetRangeError()
    {
        var messages = EditContext.GetValidationMessages(() => ViewModel.HuntingDateRange);
        return messages.FirstOrDefault();
    }

    private const int _maxAssistantGuides = 2;
    private IEnumerable<OutfitterArea> _outfitterAreas = Array.Empty<OutfitterArea>();

    [Parameter]
    [EditorRequired]
    public OutfitterGuidedHuntReportViewModel ViewModel { get; set; } = null!;

    [CascadingParameter(Name = Constants.CascadingValues.ReportType)]
    public ReportType ReportType { get; set; }

    [CascadingParameter(Name = Constants.CascadingValues.EditMode)]
    public bool EditMode { get; set; } = false;

    [CascadingParameter]
    public EditContext EditContext { get; set; } = null!;

    [Inject]
    private IDialogService DialogService { get; set; } = null!;

    [Inject]
    private ClientService ClientService { get; set; } = null!;

    [Inject]
    private ISnackbar SnackBar { get; set; } = null!;

    [Inject]
    private IMortalityService MortalityService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        _outfitterAreas = await MortalityService.GetOutfitterAreas();
    }

    public void AddAssistantGuide()
    {
        var input = ViewModel.SelectedAssistantGuide;
        if (input != null)
        {
            var hasErrors = false;
            if (ViewModel.AssistantGuides.Count == _maxAssistantGuides)
            {
                SnackBar.Add($"You may add up to {_maxAssistantGuides} assistant guides", Severity.Error);
                hasErrors = true;
            }
            else if (ViewModel.AssistantGuides.Any(x => x.EnvClientId == input.EnvClientId))
            {
                hasErrors = true;
                SnackBar.Add($"{input.FirstName} {input.LastName} already added", Severity.Error);
            }

            if (hasErrors == false)
            {
                ViewModel.AssistantGuides.Add(input);
                ViewModel.SelectedAssistantGuide = null;
                EditContext.NotifyFieldChanged(FieldIdentifier.Create(() => ViewModel.AssistantGuides));
            }
        }
    }

    private async Task Add()
    {
        var parameters = new DialogParameters
        {
            [nameof(AddActivityDialog.ReportType)] = ReportType
        };

        var dialog = DialogService.Show<AddActivityDialog>("", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            ViewModel.HuntedActivityViewModels.Add(result.Data as HuntedActivityViewModel);
        }
        if (EditContext.GetValidationMessages().Any())
        {
            EditContext.Validate();
        }
    }

    private async Task Edit(HuntedActivityViewModel viewModel)
    {
        var parameters = new DialogParameters
        {
            [nameof(EditActivityDialog.ViewModel)] = viewModel,
            [nameof(EditActivityDialog.ReportType)] = ReportType
        };

        var dialog = DialogService.Show<EditActivityDialog>("", parameters);
        var result = await dialog.Result;
    }

    private void Delete(HuntedActivityViewModel viewModel)
    {
        ViewModel.HuntedActivityViewModels.Remove(viewModel);
    }

    private void DeleteGuide(Client guide)
    {
        ViewModel.AssistantGuides.Remove(guide);
        EditContext.NotifyFieldChanged(FieldIdentifier.Create(() => ViewModel.AssistantGuides));
    }

    private async Task<IEnumerable<Client?>> SearchClientByEnvClientIdOrLastName(string input)
    {
        return (await ClientService.SearchByEnvClientId(input))
            .Union(await ClientService.SearchByLastName(input))
            .OrderBy(x => x.LastName);
    }

    private async Task<IEnumerable<OutfitterArea>> SearchOutfitterAreas(string input)
    {
        if (string.IsNullOrEmpty(input))
            return _outfitterAreas;
        return await Task.FromResult(_outfitterAreas.Where(y => y.Area.StartsWith(input)));
    }

}
