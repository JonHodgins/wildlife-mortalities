@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Reports.Activities
@using WildlifeMortalities.Data.Entities
@using WildlifeMortalities.Data.Entities.People
@using WildlifeMortalities.Data.Enums
@using WildlifeMortalities.Shared.Extensions;
@using WildlifeMortalities.Shared.Services
@inherits DbContextAwareComponent

<DateRangePickerComponent Label="Hunting dates" @bind-DateRange="ViewModel.HuntingDateRange" For="@( () => ViewModel.HuntingDateRange)" />
<MudAutocomplete T="OutfitterArea" Label="Outfitter Area" @bind-Value="ViewModel.OutfitterArea" SearchFunc="SearchOutfitterAreas"
                 ToStringFunc="@(x => x == null ? string.Empty : x.Area)" MaxItems="null" Placeholder="Select an outfitter area" For="@(() => ViewModel.OutfitterArea)"/>

<MudPaper Class="pa-4 my-4">
    <MudAutocomplete T="Client" For="@(() => ViewModel.ChiefGuide)" Label="Chief guide" Placeholder="Search by client id or last name" MinCharacters="2"
                     @bind-Value="ViewModel.ChiefGuide" ToStringFunc="@(x => x is null ? "" : $"{x.EnvPersonId} | {x.LastName}")" SearchFunc="@SearchClientByEnvClientIdOrLastName"
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Class="mb-6">
    </MudAutocomplete>
    @if(ViewModel.AssistantGuides.Count < _maxAssistantGuides)
    {
        <MudAutocomplete T="Client" @key="ViewModel.AssistantGuides.Count" Label="Add assistant guide(s)" Placeholder="Search by client id or last name" MinCharacters="2"
                         @bind-Value="ViewModel.SelectedAssistantGuide" @bind-Value:after="AddAssistantGuide" ToStringFunc="@(x => x is null ? "" : $"{x.EnvPersonId} | {x.FirstName} {x.LastName}")" SearchFunc="@SearchClientByEnvClientIdOrLastName"
                         AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Class="mb-6">
        </MudAutocomplete>
    }

    <MudList>
        @foreach (var item in ViewModel.AssistantGuides)
        {
            <MudListItem>
                <MudStack Row="true">
                    <MudField DisableUnderLine="true" Label="Assistant guide">@item</MudField>
                    <MudSpacer/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteGuide(item))"/>
                </MudStack>
            </MudListItem>
        }
    </MudList>
    <!--suppress CssUnresolvedCustomProperty -->
    <ValidationMessage For="@(() => ViewModel.AssistantGuides)" Style="font-size: 12px; color: var(--mud-palette-error);"/>
</MudPaper>

<MudSelect T="GuidedHuntResult?" @bind-Value="@ViewModel.Result" Label="Result" Placeholder="Select a result" For="@(() => ViewModel.Result)">
    @foreach (var item in Enum.GetValues<GuidedHuntResult>())
    {
        <MudSelectItem T="GuidedHuntResult?" Value="@item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
@if (ViewModel.Result is GuidedHuntResult.WentHuntingAndKilledWildlife)
{
    <MudGrid Class="my-3">
        @foreach (var item in ViewModel.HuntedActivityViewModels)
        {
            <MudItem md="2" xs="6">
                <ActivityCardComponent EnableBioSubmission="false"
                                       OnEditClicked="@(() => Edit(item))" EnableDelete="true" EnableEdit="true"
                                       ActivityViewModel="item"
                                       OnDeleteClicked="@(() => Delete(item))"/>
            </MudItem>
        }
    </MudGrid>
    <MudStack Row="true">
        <MudSpacer/>
        <MudItem>
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" OnClick="Add" Size="Size.Medium" Color="Color.Tertiary">Add mortality</MudButton>
            <ValidationMessage For="@(() => ViewModel.HuntedActivityViewModels)" Style="font-size: 12px; color: var(--mud-palette-error);" />
        </MudItem>
        <MudSpacer/>
    </MudStack>
}


