@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Reports.Activities;
@using WildlifeMortalities.App.Features.Shared.Mortalities
@using WildlifeMortalities.Data
@using WildlifeMortalities.Data.Entities
@using WildlifeMortalities.Data.Entities.People
@using WildlifeMortalities.Data.Enums
@using WildlifeMortalities.Shared.Services
@using Microsoft.EntityFrameworkCore
<MudDateRangePicker Label="Hunting dates" @bind-DateRange="ViewModel.HuntingDateRange" />
<MudAutocomplete T="OutfitterArea" Label="Outfitter Area" @bind-Value="ViewModel.OutfitterArea" SearchFunc="SearchOutfitterAreas"
                 ToStringFunc="@(x => x == null ? string.Empty : x.Area)" MaxItems="null" Placeholder="Select an outfitter area" For="@(() => ViewModel.OutfitterArea)" />

<MudPaper Class="pa-4 my-4">
    <MudAutocomplete T="Client" Label="Add guide(s)" Placeholder="Search by client id or last name" MinCharacters="2"
                     Value="ViewModel.SelectedGuide" ValueChanged="AddClient" ToStringFunc="@(x => x is null ? "" : $"{x.EnvClientId} | {x.FirstName} {x.LastName}")" SearchFunc="@SearchClientByEnvClientIdOrLastName"
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Class="mb-6">
    </MudAutocomplete>

    <MudList>
        @foreach (var item in ViewModel.Guides)
        {
            <MudListItem>
                <MudStack Row="true">
                    <MudField DisableUnderLine="true" Label="Guide">@item.FirstName @item.LastName</MudField>
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteGuide(item))" />
                </MudStack>
            </MudListItem>
        }
    </MudList>
    <!--suppress CssUnresolvedCustomProperty -->
    <ValidationMessage For="@(() => ViewModel.Guides)" Style="font-size: 12px; color: var(--mud-palette-error);" />
</MudPaper>

<MudSelect T="GuidedHuntResult?" @bind-Value="@ViewModel.Result" Label="Result" Placeholder="Select a result" For="@(() => ViewModel.Result)">
    @foreach (var item in Enum.GetValues<GuidedHuntResult>())
    {
        <MudSelectItem T="GuidedHuntResult?" Value="@item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
@if (ViewModel.Result is GuidedHuntResult.WentHuntingAndKilledWildlife)
{
    <MudGrid Class="my-3">
        @foreach (var item in ViewModel.HuntedActivityViewModels)
        {
            <MudItem md="2" xs="6">
                <MortalityCardComponent EnableBioSubmission="false"
                                OnEditClicked="@(() => Edit(item))" EnableDelete="true"
                                MortalityViewModel="item.MortalityWithSpeciesSelectionViewModel.MortalityViewModel"
                                OnDeleteClicked="@(() => Delete(item))" />
            </MudItem>
        }
    </MudGrid>
    <MudStack Row="true">
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" OnClick="Add" Size="Size.Medium" Color="Color.Tertiary">Add mortality</MudButton>
        <MudSpacer />
    </MudStack>
}

@code {
    private IEnumerable<OutfitterArea> _outfitterAreas = Array.Empty<OutfitterArea>();

    [Parameter]
    [EditorRequired]
    public OutfitterGuidedHuntReportViewModel ViewModel { get; set; } = null!;

    [CascadingParameter(Name = Constants.CascadingValues.MortalityReportType)]
    public MortalityReportType MortalityReportType { get; set; }

    [CascadingParameter(Name = Constants.CascadingValues.EditMode)]
    public bool EditMode { get; set; } = false;

    [Inject]
    private IDialogService DialogService { get; set; } = null!;

    [Inject]
    private ClientService ClientService { get; set; } = null!;

    [Inject]
    private ISnackbar SnackBar { get; set; } = null!;

    [Inject]
    private IMortalityService MortalityService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        _outfitterAreas = await MortalityService.GetOutfitterAreas();
    }

    public void AddClient(Client? input)
    {
        ViewModel.SelectedGuide = input;
        if (input != null)
        {
            var hasErrors = false;
            if (ViewModel.Guides.Count == 3)
            {
                SnackBar.Add("You may add up to 3 guides", Severity.Error);
                hasErrors = true;
            }
            else if (ViewModel.Guides.Any(x => x.EnvClientId == input.EnvClientId))
            {
                hasErrors = true;
                SnackBar.Add($"{input.FirstName} {input.LastName} already added", Severity.Error);
            }

            if (hasErrors == false)
            {
                ViewModel.Guides.Add(input);
                ViewModel.SelectedGuide = null;
            }
        }
    }

    private async Task Add()
    {
        var parameters = new DialogParameters
            {
                [nameof(AddActivityDialog.MortalityReportType)] = MortalityReportType
            };

        var dialog = DialogService.Show<AddActivityDialog>("", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            ViewModel.HuntedActivityViewModels.Add(result.Data as HuntedActivityViewModel);
        }
    }

    private async Task Edit(HuntedActivityViewModel viewModel)
    {
        var parameters = new DialogParameters
            {
                [nameof(EditActivityDialog.ViewModel)] = viewModel,
                [nameof(EditActivityDialog.MortalityReportType)] = MortalityReportType
            };

        var dialog = DialogService.Show<EditActivityDialog>("", parameters);
        var result = await dialog.Result;
    }

    private void Delete(HuntedActivityViewModel viewModel)
    {
        ViewModel.HuntedActivityViewModels.Remove(viewModel);
    }

    private void DeleteGuide(Client guide)
    {
        ViewModel.Guides.Remove(guide);
    }

    private async Task<IEnumerable<Client?>> SearchClientByEnvClientIdOrLastName(string input)
    {
        return (await ClientService.SearchByEnvClientId(input))
            .Union(await ClientService.SearchByLastName(input))
            .OrderBy(x => x.LastName);
    }

    private async Task<IEnumerable<OutfitterArea>> SearchOutfitterAreas(string input)
    {
        if (string.IsNullOrEmpty(input))
            return _outfitterAreas;
        return await Task.FromResult(_outfitterAreas.Where(y => y.Area.StartsWith(input)));
    }

}
