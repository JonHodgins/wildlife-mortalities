@attribute [Route(Constants.Routes.CreateReportPage)]
@attribute [Route(Constants.Routes.EditDraftReportPage)]
@attribute [Route(Constants.Routes.EditReportPage)]

@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Shared.Extensions;
@inherits DbContextAwareComponent

@if (_vm == null)
{
    <MudProgressCircular Indeterminate="true" />
    return;
}

@if (_personId == 0)
{
    <MudAlert Severity="Severity.Error">No person with that Id was found.</MudAlert>

    return;
}

<MudText Typo="Typo.h3" Class="mb-8">@_vm.ReportType.GetDisplayName() report</MudText>

<EditForm OnValidSubmit="SubmitReport" OnInvalidSubmit="@(() => _invalidSubmitDetected = true)" EditContext="_editContext" onkeypress="preventEnterFromSubmitting(event)">
    <ValidationSummary />
    <FluentValidationValidator />
    @if (_vm.IsUpdate == false)
    {
        <MudSelect T="ReportType" Value="_vm.ReportType" ValueChanged="ReportTypeChanged" For="@(() => _vm.ReportType)" Label="Mortality report type">
            @foreach (ReportType reportType in Enum.GetValues<ReportType>().Where(x => x.IsCreatable()))
            {
                <MudSelectItem Value="@reportType" T="ReportType">@reportType.GetDisplayName()</MudSelectItem>
            }
        </MudSelect>
    } else
    {
        <MudDatePicker @bind-Date="_vm.DateSubmitted" Label="Date submitted"/>
    }
    <CascadingValue Name="@Constants.CascadingValues.EditMode" Value="@_vm.IsUpdate" IsFixed="true">
        <CascadingValue Name="@Constants.CascadingValues.ReportType" Value="_vm.ReportType">
            @switch (_vm.ReportType)
            {
                case ReportType.IndividualHuntedMortalityReport:
                    <IndividualHuntedMortalityReportComponent ViewModel="@(_vm.ReportViewModel as IndividualHuntedMortalityReportViewModel)" />
                    break;
                case ReportType.OutfitterGuidedHuntReport:
                    <OutfitterGuidedHuntReportComponent ViewModel="@(_vm.ReportViewModel as OutfitterGuidedHuntReportViewModel)" />
                    break;
                case ReportType.SpecialGuidedHuntReport:
                    <SpecialGuidedHuntReportComponent ViewModel="@(_vm.ReportViewModel as SpecialGuidedHuntReportViewModel)" />
                    break;
                case ReportType.TrappedMortalitiesReport:
                    <TrappedReportComponent ViewModel="@(_vm.ReportViewModel as TrappedReportViewModel)" />
                    break;
                default:
                    throw new NotImplementedException("Report type not recognized.");
            }
        </CascadingValue>
    </CascadingValue>

    @*<MudPaper Elevation="0" Class="mt-4">
    <MudText Typo="Typo.h6">Signature</MudText>
    <SignaturePadComponent @ref="_signaturePad"/>
    </MudPaper>

    <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple/>

    <MudButton HtmlTag="label"
    Variant="Variant.Filled"
    Color="Color.Info"
    StartIcon="@Icons.Material.Filled.CloudUpload"
    for="fileInput"
    Class="mt-4">
    Attach Files
    </MudButton>

    @if (_files.Count != 0)
    {
    <MudText Typo="@Typo.h6">@_files.Count() File@(_files.Count() == 1 ? "" : "s"):</MudText>
    <MudList>
    @foreach (var file in _files)
    {
    <MudListItem Icon="@Icons.Material.Filled.AttachFile" @key="@file">
    @file.Name <code>@file.Size bytes</code>
    </MudListItem>
    }
    </MudList>
    }*@

    <MudStack Row="true" Class="mt-4">
        <MudSpacer />
        @if (_editContext.GetValidationMessages().Any() && ReportId == null)
        {
            <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Button" OnClick="CreateDraftReport" Color="Color.Primary">Save as draft</MudButton>
        }

        <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Disabled="@(_editContext.GetValidationMessages().Any())">
            @((ReportId == null ? "Create report" : "Update report"))
        </MudButton>
    </MudStack>
</EditForm>
