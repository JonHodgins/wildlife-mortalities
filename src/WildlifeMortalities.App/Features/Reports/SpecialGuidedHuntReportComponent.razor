@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Reports.Activities;
@using WildlifeMortalities.App.Features.Shared.Mortalities
@using WildlifeMortalities.Data.Entities.People
@using WildlifeMortalities.Data.Enums
@using WildlifeMortalities.Shared.Services
<MudDateRangePicker Label="Hunting dates" @bind-DateRange="ViewModel.HuntingDateRange" />

<MudPaper Class="pa-4 my-4">
    <MudAutocomplete T="Client" For="@(() => ViewModel.Guide)" Label="Guide" Placeholder="Search by client id or last name" MinCharacters="2"
                     @bind-Value="ViewModel.Guide" ToStringFunc="@(x => x is null ? "" : $"{x.EnvClientId} | {x.LastName}")" SearchFunc="@SearchClientByEnvClientIdOrLastName"
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Class="mb-6">
    </MudAutocomplete>
</MudPaper>

<MudSelect T="GuidedHuntResult?" @bind-Value="@ViewModel.Result" Label="Result" Placeholder="Select a result" For="@(() => ViewModel.Result)">
    @foreach (var item in Enum.GetValues<GuidedHuntResult>())
    {
        <MudSelectItem T="GuidedHuntResult?" Value="@item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
@if (ViewModel.Result is GuidedHuntResult.WentHuntingAndKilledWildlife)
{
   <MudGrid Class="my-3">
        @foreach (var item in ViewModel.HuntedActivityViewModels)
        {
            <MudItem md="2" xs="6">
                <MortalityCardComponent EnableBioSubmission="false"
                                OnEditClicked="@(() => Edit(item))" EnableDelete="true"
                                MortalityViewModel="item.MortalityWithSpeciesSelectionViewModel.MortalityViewModel"
                                OnDeleteClicked="@(() => Delete(item))" />
            </MudItem>
        }
    </MudGrid>
    <MudStack Row="true">
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" OnClick="Add" Size="Size.Medium" Color="Color.Tertiary">Add mortality</MudButton>
        <MudSpacer />
    </MudStack>
}


@code {

    [Parameter]
    [EditorRequired]
    public SpecialGuidedHuntReportViewModel ViewModel { get; set; } = null!;

    [CascadingParameter(Name = Constants.CascadingValues.MortalityReportType)]
    public MortalityReportType MortalityReportType { get; set; }

    [CascadingParameter(Name = Constants.CascadingValues.EditMode)]
    public bool EditMode { get; set; } = false;

    [Inject]
    private IDialogService DialogService { get; set; } = null!;

    [Inject]
    private ClientService ClientService { get; set; } = null!;

    private async Task Add()
    {
        var parameters = new DialogParameters
        {
                [nameof(AddActivityDialog.MortalityReportType)] = MortalityReportType
        };

        var dialog = DialogService.Show<AddActivityDialog>("", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            ViewModel.HuntedActivityViewModels.Add(result.Data as HuntedActivityViewModel);
        }
    }

    private async Task Edit(HuntedActivityViewModel viewModel)
    {
        var parameters = new DialogParameters
        {
            [nameof(EditActivityDialog.ViewModel)] = viewModel,
            [nameof(EditActivityDialog.MortalityReportType)] = MortalityReportType
        };

        var dialog = DialogService.Show<EditActivityDialog>("", parameters);
        var result = await dialog.Result;
    }

    private void Delete(HuntedActivityViewModel viewModel)
    {
        ViewModel.HuntedActivityViewModels.Remove(viewModel);
    }

    private async Task<IEnumerable<Client>> SearchClientByEnvClientIdOrLastName(string input)
    {
        return (await ClientService.SearchByEnvClientId(input))
            .Union(await ClientService.SearchByLastName(input))
            .OrderBy(x => x.LastName);
    }

}
