@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Reports.Activities;
@using WildlifeMortalities.Data.Entities.People
@using WildlifeMortalities.Data.Enums
@using WildlifeMortalities.Shared.Services
<MudDateRangePicker Editable="true" Label="Hunting dates"/>

<MudPaper Class="pa-4 my-4">
    <MudAutocomplete T="Client" For="@(() => ViewModel.Guide)" Label="Guide" Placeholder="Search by client id or last name" MinCharacters="2"
                     @bind-Value="ViewModel.Guide" ToStringFunc="@(x => x is null ? "" : $"{x.EnvClientId} | {x.LastName}")" SearchFunc="@SearchClientByEnvClientIdOrLastName"
                     AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" Class="mb-6">
    </MudAutocomplete>
</MudPaper>

<MudSelect T="GuidedHuntResult?" @bind-Value="@ViewModel.Result" Label="Result" Placeholder="Select a result" For="@(() => ViewModel.Result)">
    @foreach (var item in Enum.GetValues<GuidedHuntResult>())
    {
        <MudSelectItem T="GuidedHuntResult?" Value="@item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
@if (ViewModel.Result is GuidedHuntResult.WentHuntingAndKilledWildlife)
{
    <MudList>
        @foreach (var item in ViewModel.HuntedActivityViewModels)
        {
            <MudItem md="2" xs="6">
                <MudCard Elevation="5" Class="flex-column d-flex" Style="height: 100%">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@item.MortalityWithSpeciesSelectionViewModel.Species.GetDisplayName()</MudText>
                        </CardHeaderContent>
                        @* <CardHeaderActions> *@
                        @*     <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" /> *@
                        @* </CardHeaderActions> *@
                    </MudCardHeader>
                    <MudCardContent Class="flex-column d-flex" Style="height: 100%">
                        <MudStack Row="false">
                            @foreach (var property in item.MortalityWithSpeciesSelectionViewModel.MortalityViewModel.GetProperties())
                            {
                                var normalizedValue = (property.Value ?? string.Empty).ToLower();
                                @if (bool.TryParse(property.Value, out var value))
                                {
                                    <MudCheckBox T="bool" ReadOnly="true" Checked="value" Label="@property.Key" />
                                }
                                else if (DateTime.TryParse(property.Value, out var dateValue))
                                {
                                    <MudField DisableUnderLine="true" Label="@property.Key">@dateValue.Date.ToShortDateString()</MudField>
                                }
                                else
                                {
                                    <MudField DisableUnderLine="true" Label="@property.Key">@property.Value</MudField>
                                }
                            }
                            <MudField DisableUnderLine="true" Label="Landmark">@item.Landmark</MudField>
                            <MudField DisableUnderLine="true" Label="Comment">@item.Comment</MudField>
                        </MudStack>
                        <MudSpacer />
                    </MudCardContent>
                    <MudCardActions>
                        <MudStack Row="true" Class="justify-right">
                            <MudSpacer />
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="@(() => Edit(item))" Color="Color.Primary" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => Delete(item))" Color="Color.Error" />
                        </MudStack>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    </MudList>
    <MudStack Row="true">
        <MudSpacer/>
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" OnClick="Add" Size="Size.Medium" Color="Color.Tertiary">Add mortality</MudButton>
        <MudSpacer/>
    </MudStack>
}


@code {

    [Parameter]
    [EditorRequired]
    public SpecialGuidedHuntReportViewModel ViewModel { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public MortalityReportType? MortalityReportType { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; } = null!;

    [Inject]
    private ClientService ClientService { get; set; } = null!;

    private async Task Add()
    {
        var parameters = new DialogParameters
        {
                [nameof(AddActivityDialog.ReportType)] = MortalityReportType
        };

        var dialog = DialogService.Show<AddActivityDialog>("", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            ViewModel.HuntedActivityViewModels.Add(result.Data as HuntedActivityViewModel);
        }
    }

    private async Task Edit(HuntedActivityViewModel viewModel)
    {
        var parameters = new DialogParameters
        {
            [nameof(EditActivityDialog.ViewModel)] = viewModel
        };

        var dialog = DialogService.Show<EditActivityDialog>("", parameters);
        var result = await dialog.Result;
    }

    private void Delete(HuntedActivityViewModel viewModel)
    {
        ViewModel.HuntedActivityViewModels.Remove(viewModel);
    }

    private async Task<IEnumerable<Client>> SearchClientByEnvClientIdOrLastName(string input)
    {
        return (await ClientService.SearchByEnvClientId(input))
            .Union(await ClientService.SearchByLastName(input))
            .OrderBy(x => x.LastName);
    }

}
