using FluentValidation;
using WildlifeMortalities.Data.Entities.Reports.SingleMortality;

namespace WildlifeMortalities.App.Features.Reports;

public class IndividualHuntedMortalityReportViewModel
{
    private readonly int _reportId = Constants.EfCore.TemporaryAutoGeneratedKey;

    public IndividualHuntedMortalityReportViewModel() { }

    public IndividualHuntedMortalityReportViewModel(IndividualHuntedMortalityReport report)
    {
        HuntedActivityViewModel = new HuntedActivityViewModel(report.HuntedActivity, report);
        _reportId = report.Id;
    }

    public HuntedActivityViewModel HuntedActivityViewModel { get; set; } = new();
    public DateTimeOffset? DateSubmitted { get; set; }

    public IndividualHuntedMortalityReport GetReport(int personId) =>
        new()
        {
            Id = _reportId,
            ClientId = personId,
            HuntedActivity = HuntedActivityViewModel.GetActivity(),
            DateSubmitted = DateSubmitted ?? DateTimeOffset.Now
        };
}

public class IndividualHuntedMortalityReportViewModelValidator
    : AbstractValidator<IndividualHuntedMortalityReportViewModel>
{
    public IndividualHuntedMortalityReportViewModelValidator()
    {
        RuleFor(x => x.HuntedActivityViewModel)
            .SetValidator(new HuntedActivityViewModelValidator());
        // Todo: attach validation message
        RuleFor(x => x.DateSubmitted)
            .Must(
                (model, dateSubmitted) =>
                    (dateSubmitted ?? DateTimeOffset.Now)
                    >= model
                        .HuntedActivityViewModel
                        .MortalityWithSpeciesSelectionViewModel
                        .MortalityViewModel
                        .DateOfDeath
            )
            .WithMessage("Date submitted cannot occur before date of death.");
    }
}
