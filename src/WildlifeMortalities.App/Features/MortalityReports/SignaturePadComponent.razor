@implements IDisposable

<canvas id="@id" style="border: 1px solid black" width="400" height="200"/>

<MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="Reset"/>

@code {
    private Guid id = Guid.NewGuid();

    [Inject]
    public IJSRuntime JsRuntime { get; set; } = null!;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("mortality.initSignaturePad", id);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task Reset()
    {
        await JsRuntime.InvokeVoidAsync("mortality.resetSignaturePad", id);
    }


    public async Task<string> GetSignature()
    {
        var content = await JsRuntime.InvokeAsync<string>("mortality.getSignaturePadContent", id);
        return content;
    }

    public void Dispose()
    {
        JsRuntime.InvokeVoidAsyncWithErrorHandling("mortality.removeSignaturePad", id);
    }

}
