@using Microsoft.EntityFrameworkCore
@using WildlifeMortalities.App.Features.Shared.Mortalities
@using WildlifeMortalities.Data
@using WildlifeMortalities.Data.Entities
<MortalityComponent ViewModel="ViewModel.MortalityWithSpeciesSelectionViewModel" ReportType="MortalityReportType" DisableSpeciesSelection="@(EditMode)"/>
<MudTextField @bind-Value="ViewModel.Landmark" For="@(() => ViewModel.Landmark)" Label="Landmark"/>
<MudAutocomplete T="GameManagementArea" Label="Game Management Area" @bind-Value="ViewModel.GameManagementArea" SearchFunc="SearchGameManagementAreas"
                 ToStringFunc="@(x => x == null ? string.Empty : x.Area)" MaxItems="null" Placeholder="Select a GMA" For="@(() => ViewModel.GameManagementArea)"/>
<MudTextField @bind-Value="ViewModel.Comment" For="@(() => ViewModel.Comment)" Label="Comment" Lines="4"/>


@code {

    private List<GameManagementArea> _gameManagementAreas = new();

    [Parameter]
    [EditorRequired]
    public HuntedMortalityReportViewModel ViewModel { get; set; } = null!;

    [Parameter]
    public bool EditMode { get; set; } = false!;

    [Inject]
    private IDbContextFactory<AppDbContext> ContextFactory { get; set; } = null!;


    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = await ContextFactory.CreateDbContextAsync();
        _gameManagementAreas = await dbContext.GameManagementAreas.ToListAsync();
    }

    [Parameter]
    [EditorRequired]
    public MortalityReportType MortalityReportType { get; set; }

    private async Task<IEnumerable<GameManagementArea>> SearchGameManagementAreas(string value)
    {
        if (string.IsNullOrEmpty(value))
            return _gameManagementAreas;
        return await Task.FromResult(_gameManagementAreas.Where(y => y.Area.StartsWith(value) || (y.Zone + y.Subzone).StartsWith(value)));
    }

}
