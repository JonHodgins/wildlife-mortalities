@namespace WildlifeMortalities.App.Features.MortalityReports
@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Data.Enums
@inherits ReportTypeComponent<SelectSpeciesViewModel>


@if (ReportType is MortalityReportType.Conflict)
{
}
else if (ReportType is MortalityReportType.IndividualHunt or MortalityReportType.OutfitterGuidedHunt)
{
    <MudSelect T="HuntedSpecies?" Value="GetModel().HuntedSpecies" ValueChanged="OnHuntedSpeciesChanged" For="@(() => GetModel().HuntedSpecies)" Label="Species" Placeholder="Select a species">
        @foreach (var species in Enum.GetValues<HuntedSpecies>().OrderBy(s => s.GetDisplayName()))
        {
            <MudSelectItem Value="@species" T="HuntedSpecies?">@species.GetDisplayName()</MudSelectItem>
        }
    </MudSelect>
}
else if (ReportType is MortalityReportType.SpecialGuidedHunt)
{
    <MudSelect T="HuntedSpecies?" Value="GetModel().HuntedSpecies" ValueChanged="OnHuntedSpeciesChanged" For="@(() => GetModel().HuntedSpecies)" Label="Species" Placeholder="Select a species">
        @foreach (var species in Enum.GetValues<HuntedSpecies>()
            .Where(s => s is HuntedSpecies.AmericanBlackBear or HuntedSpecies.Caribou or HuntedSpecies.Coyote or HuntedSpecies.GreyWolf or HuntedSpecies.WoodBison)
            .OrderBy(s => s.GetDisplayName()))
        {
            <MudSelectItem Value="@species" T="HuntedSpecies?">@species.GetDisplayName()</MudSelectItem>
        }
    </MudSelect>
}
else if (ReportType is MortalityReportType.Trapped)
{
    <MudSelect T="TrappedSpecies?" Value="GetModel().TrappedSpecies" ValueChanged="OnTrappedSpeciesSpeciesChanged" For="@(() => GetModel().TrappedSpecies)" Label="Species" Placeholder="Select a species">
        @foreach (var species in Enum.GetValues<TrappedSpecies>().OrderBy(s => s.GetDisplayName()))
        {
            <MudSelectItem Value="@species" T="TrappedSpecies?">@species.GetDisplayName()</MudSelectItem>
        }
    </MudSelect>
}

@code {

    private SelectSpeciesViewModel GetModel()
    {
        return CascadingViewModel ?? ViewModel;
    }

    private async Task OnHuntedSpeciesChanged(HuntedSpecies? species)
    {
        GetModel().HuntedSpecies = species;
        await SpeciesChanged.InvokeAsync(s_huntedMapper[species.Value]);
    }

    private async Task OnTrappedSpeciesSpeciesChanged(TrappedSpecies? species)
    {
        GetModel().TrappedSpecies = species;
        await SpeciesChanged.InvokeAsync(s_trappedMapper[ViewModel.TrappedSpecies.Value]);
    }


}
