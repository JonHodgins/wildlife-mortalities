@using Microsoft.EntityFrameworkCore;
@using WildlifeMortalities.App.Extensions;
@using WildlifeMortalities.Data.Entities.Authorizations;
@using WildlifeMortalities.Data;
@using WildlifeMortalities.Shared.Services;
@inherits DbContextAwareComponent

<MudText Typo="Typo.h5">Authorizations</MudText>

@if (_isLoading == true)
{
    return;
}

<MudTabs Color="Color.Secondary" Rounded="true">
    @{
        List<string> seasons = new();
    }
    @foreach (var authorization in _authorizationsViewModel.Authorizations.Where(x => x is IHasBigGameHuntingLicence == false))
    {
        var season = authorization.Season;
        if (season != null)
        {
            seasons.Add(season);
        }
    }
    @foreach (var season in seasons.Distinct().OrderBy(x => x))
    {
        <MudTabPanel Text="@season">
            @foreach (var authorization in _authorizationsViewModel.Authorizations.Where(x => x is IHasBigGameHuntingLicence == false
           && x.Season == season))
            {
                <AuthorizationCardComponent Authorization="@authorization" />
            }
        </MudTabPanel>
    }
</MudTabs>

@code {

    [Parameter]
    [EditorRequired]
    public int ClientId { get; set; }

    private AuthorizationsViewModel _authorizationsViewModel = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authorizations = await Context.Authorizations.AsNoTracking().Where(a => a.ClientId == ClientId)
            .Include(x => ((BigGameHuntingLicence)x).OutfitterAreas)
            .Include(x => ((BigGameHuntingLicence)x).HuntingSeals)
            .Include(x => ((BigGameHuntingLicence)x).HuntingPermits)
            .Include(x => ((BigGameHuntingLicence)x).PhaHuntingPermits)
            .Include(x => ((BigGameHuntingLicence)x).SpecialGuideLicence)
            .ToArrayAsync();

        _authorizationsViewModel.Authorizations = authorizations;

        _isLoading = false;
    }

}
