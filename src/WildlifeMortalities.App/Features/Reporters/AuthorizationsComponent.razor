@using Microsoft.EntityFrameworkCore;
@using WildlifeMortalities.App.Extensions;
@using WildlifeMortalities.Data.Entities.Authorizations;
@using WildlifeMortalities.Data;
@using WildlifeMortalities.Data.Entities;
@using WildlifeMortalities.Shared.Services;
@inherits DbContextAwareComponent

<MudText Typo="Typo.h5">Authorizations</MudText>

@if (_isLoading == true)
{
    return;
}

<MudTabs Color="Color.Info" Rounded="true" @bind-ActivePanelIndex="_panelIndex">
    @{
        List<string> seasons = new();
    }
    @foreach (var authorization in _authorizationsViewModel.Authorizations.Where(x => x is IHasBigGameHuntingLicence == false))
    {
        var season = authorization.Season.FriendlyName;
        if (season != null)
        {
            seasons.Add(season);
        }
    }
    @foreach (var season in seasons.Distinct().OrderBy(x => x))
    {
        <MudTabPanel Text="@season">
            @foreach (var authorization in _authorizationsViewModel.Authorizations.Where(x => x is IHasBigGameHuntingLicence == false
           && x.Season.FriendlyName == season))
            {
                <AuthorizationCardComponent Authorization="@authorization" />
            }
        </MudTabPanel>
    }
</MudTabs>

@code {
    private int _panelIndex = 0;
    private int? _queuedPanelIndex;

    [Parameter]
    [EditorRequired]
    public int ClientId { get; set; }

    private AuthorizationsViewModel _authorizationsViewModel = new();
    private bool _isLoading = true;


    protected override async Task OnParametersSetAsync()
    {
        var authorizations = await Context.Authorizations.Where(a => a.ClientId == ClientId)
            .Include(x => ((BigGameHuntingLicence)x).OutfitterAreas)
            .Include(x => ((BigGameHuntingLicence)x).HuntingSeals)
            .Include(x => ((BigGameHuntingLicence)x).HuntingPermits)
            .Include(x => ((BigGameHuntingLicence)x).PhaHuntingPermits)
            .Include(x => ((BigGameHuntingLicence)x).SpecialGuideLicence)
            .Include(x => x.Season)
            .ToArrayAsync();

        _authorizationsViewModel.Authorizations = authorizations;

        _isLoading = false;

        _queuedPanelIndex = _authorizationsViewModel.Authorizations.Select(x => x.Season.FriendlyName).Distinct().Count() - 1;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_queuedPanelIndex.HasValue == true)
        {
            _panelIndex = _queuedPanelIndex.Value;
            _queuedPanelIndex = null;
            StateHasChanged();
        }
    }

}
