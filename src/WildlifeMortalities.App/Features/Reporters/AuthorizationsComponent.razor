@using Microsoft.EntityFrameworkCore;
@using WildlifeMortalities.App.Extensions;
@using WildlifeMortalities.Data.Entities.Authorizations;
@using WildlifeMortalities.Data;
@using WildlifeMortalities.Data.Entities;
@using WildlifeMortalities.Shared.Extensions;
@using WildlifeMortalities.Shared.Services;
@inherits DbContextAwareComponent

<MudText Typo="Typo.h5">Authorizations</MudText>

@if (_isLoading == true)
{
    return;
}
<MudPaper>
    <MudTabs Color="Color.Info" Rounded="true" @bind-ActivePanelIndex="_panelIndex">
        @{
            List<string> seasons = new();
        }
        @if(_authorizationsViewModel.Authorizations.Any() == false){
            <MudTabPanel Text="None"/>
        }
        @foreach (var authorization in _authorizationsViewModel.Authorizations)
        {
            var season = authorization.Season.FriendlyName;
            if (season != null)
            {
                seasons.Add(season);
            }
        }
        @foreach (var season in seasons.Distinct().OrderBy(x => x))
        {
            <MudTabPanel Text="@season">
                @{
                    var authorizationsWithinSeason = _authorizationsViewModel.Authorizations.Where(x => x.Season.FriendlyName == season).ToList();
                    var bigGameHuntingLicences = authorizationsWithinSeason.OfType<BigGameHuntingLicence>();
                    var smallGameHuntingLicences = authorizationsWithinSeason.OfType<SmallGameHuntingLicence>();
                    var outfitterChiefGuideLicences = authorizationsWithinSeason.OfType<OutfitterChiefGuideLicence>();
                    var outfitterAssistantGuideLicences = authorizationsWithinSeason.OfType<OutfitterAssistantGuideLicence>();
                    var specialGuideLicences = authorizationsWithinSeason.OfType<SpecialGuideLicence>();
                }
                <MudItem Class="mx-2 my-2">
                @if (bigGameHuntingLicences.Any() == true || smallGameHuntingLicences.Any() == true || outfitterChiefGuideLicences.Any() == true
                    || outfitterAssistantGuideLicences.Any() == true || specialGuideLicences.Any() ==true)
                {
                    <MudItem>
                        <MudText Typo="Typo.h6">Hunting licences</MudText>
                        <MudGrid>
                            @foreach (var authorization in bigGameHuntingLicences.OrderBy(x => x.Type.GetDisplayName()))
                            {
                                <MudItem xs="12" md="6" xxl="4">
                                    <AuthorizationCardComponent Authorization="@authorization" />
                                </MudItem>
                            }
                            @foreach (var authorization in smallGameHuntingLicences.OrderBy(x => x.Type.GetDisplayName()))
                            {
                                <MudItem xs="12" md="6" xxl="4">
                                    <AuthorizationCardComponent Authorization="@authorization" />
                                </MudItem>
                            }
                            @foreach (var authorization in outfitterChiefGuideLicences)
                            {
                                <MudItem xs="12" md="6" xxl="4">
                                    <AuthorizationCardComponent Authorization="@authorization" />
                                </MudItem>
                            }
                            @foreach (var authorization in outfitterAssistantGuideLicences)
                            {
                                <MudItem xs="12" md="6" xxl="4">
                                    <AuthorizationCardComponent Authorization="@authorization" />
                                </MudItem>
                            }
                            @foreach (var authorization in specialGuideLicences)
                            {
                                <MudItem xs="12" md="6" xxl="4">
                                    <AuthorizationCardComponent Authorization="@authorization" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                }
                @{
                    var huntingSeals = authorizationsWithinSeason.OfType<HuntingSeal>();
                }
                @if (huntingSeals.Any() == true)
                {
                    <MudItem Class="mt-2">
                        <MudText Typo="Typo.h6">Hunting seals</MudText>
                        <MudGrid>
                            @foreach (var authorization in huntingSeals.OrderBy(x => x.Type.GetDisplayName()))
                            {
                                <MudItem xs="12" md="6" lg="4" xxl="4">
                                    <AuthorizationCardComponent Authorization="@authorization" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                }
                @{
                    var phaHuntingPermits = authorizationsWithinSeason.OfType<PhaHuntingPermit>();
                }
                @if (phaHuntingPermits.Any() == true)
                    {
                        <MudItem Class="mt-2">
                            <MudText Typo="Typo.h6">Permit hunt authorizations</MudText>
                            <MudGrid>
                            @foreach (var authorization in phaHuntingPermits.OrderBy(x => x.Type.GetDisplayName()))
                                {
                                    <MudItem xs="12" md="6" xxl="4">
                                        <AuthorizationCardComponent Authorization="@authorization" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                    }
                @{
                    var huntingPermits = authorizationsWithinSeason.OfType<HuntingPermit>();
                }
                @if (huntingPermits.Any() == true)
                    {
                        <MudItem Class="mt-2">
                            <MudText Typo="Typo.h6">Hunting permits</MudText>
                            <MudGrid>
                            @foreach (var authorization in huntingPermits.OrderBy(x => x.Type.GetDisplayName()))
                                {
                                    <MudItem xs="12" md="6" xxl="4">
                                        <AuthorizationCardComponent Authorization="@authorization" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                    }
                @{
                    var trappingLicences = authorizationsWithinSeason.OfType<TrappingLicence>();
                }
                @if (trappingLicences.Any() == true)
                {
                    <MudItem Class="mt-2">
                        <MudText Typo="Typo.h6">Trapping licences</MudText>
                        <MudGrid>
                        @foreach (var authorization in trappingLicences.OrderBy(x => x.Type.GetDisplayName()))
                            {
                                <MudItem xs="12" md="6" xxl="4">
                                    <AuthorizationCardComponent Authorization="@authorization" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                }
                @{
                    var customWildlifeActPermits = authorizationsWithinSeason.OfType<CustomWildlifeActPermit>();
                }
                @if (customWildlifeActPermits.Any() == true)
                {
                    <MudItem Class="mt-2">
                        <MudText Typo="Typo.h6">Custom wildlife act permits</MudText>
                        <MudGrid>
                            @foreach (var authorization in customWildlifeActPermits)
                            {
                                <MudItem xs="12" md="6" xxl="4">
                                    <AuthorizationCardComponent Authorization="@authorization" />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>
                }
                </MudItem>
            </MudTabPanel>
        }
    </MudTabs>
</MudPaper>
@code {
    private int _panelIndex = 0;
    private int? _queuedPanelIndex;

    [Parameter]
    [EditorRequired]
    public int ClientId { get; set; }

    private AuthorizationsViewModel _authorizationsViewModel = new();
    private bool _isLoading = true;


    protected override async Task OnParametersSetAsync()
    {
        var authorizations = await Context.Authorizations.Where(a => a.ClientId == ClientId)
            .Include(x => ((BigGameHuntingLicence)x).OutfitterAreas)
            .Include(x => ((TrappingLicence)x).RegisteredTrappingConcession)
            .Include(x => x.Season)
            .ToArrayAsync();

        _authorizationsViewModel.Authorizations = authorizations;

        _isLoading = false;

        _queuedPanelIndex = _authorizationsViewModel.Authorizations.Select(x => x.Season.FriendlyName).Distinct().Count() - 1;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_queuedPanelIndex.HasValue == true)
        {
            _panelIndex = _queuedPanelIndex.Value;
            _queuedPanelIndex = null;
            StateHasChanged();
        }
    }

}
