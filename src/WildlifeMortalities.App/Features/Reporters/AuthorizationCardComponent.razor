@using System.Text.RegularExpressions;
@using WildlifeMortalities.App.Extensions;
@using WildlifeMortalities.Data.Entities.Authorizations;
@using WildlifeMortalities.Shared.Extensions;

<MudCard Outlined="true" Style="@Style">
    <MudCardHeader Class="ml-n1">
        <CardHeaderAvatar>
            <MudChip Class="@GetColourByType()" DisableRipple="true">@GetTypeShortName()</MudChip>
        </CardHeaderAvatar>
    </MudCardHeader>
    <MudCardContent Class="ml-3 mt-n6">
        @if(Authorization is IHasOutfitterAreas auth  && auth.OutfitterAreas != null && auth.OutfitterAreas.Any())
        {
            <MudField Label="Outfitter areas" DisableUnderLine="true">@string.Join(", ", auth.OutfitterAreas.Select(x => x.Area))</MudField>
        }
        <MudField Label="Number" DisableUnderLine="true">
            @(Regex.Replace(Authorization.Number, "[A-Za-z-]", ""))
        </MudField>
        <MudField Label="Validity" DisableUnderLine="true">
            @Authorization.ValidFromDateTime.ToString("M") - @Authorization.ValidToDateTime.ToString("M")
        </MudField>
    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    [EditorRequired]
    public Authorization Authorization { get; set; } = null!;

    [Parameter]
    public String Style { get; set; } = String.Empty;

    private string GetTypeShortName() => Authorization switch
    {
        BigGameHuntingLicence b => $"Big game - {b.Type.GetDisplayName().ToLower()}",
        CustomWildlifeActPermit => "Custom wildlife act permit",
        HuntingPermit p => p.Type.GetDisplayName(),
        HuntingSeal s => s.Type.GetDisplayName(),
        OutfitterAssistantGuideLicence => "Assistant guide licence",
        OutfitterChiefGuideLicence => "Chief guide licence",
        PhaHuntingPermit p => p.Type.GetDisplayName(),
        SmallGameHuntingLicence s => $"Small game - {s.Type.GetDisplayName().ToLower()}",
        SpecialGuideLicence => "Special guide licence",
        TrappingLicence t => t.Type.GetDisplayName(),
        _ => String.Empty,
    };

    private string GetColourByType() => Authorization switch
    {
        BigGameHuntingLicence => "blue-grey darken-2 shades-text text-white",
        CustomWildlifeActPermit => "red darken-2 shades-text text-white",
        HuntingPermit => "pink darken-2 shades-text text-white",
        HuntingSeal => "deep-purple darken-2 shades-text text-white",
        OutfitterAssistantGuideLicence => "indigo darken-2 shades-text text-white",
        OutfitterChiefGuideLicence => "cyan darken-2 shades-text text-white",
        PhaHuntingPermit => "orange darken-2 shades-text text-white",
        SmallGameHuntingLicence => "lime darken-2 shades-text text-white",
        SpecialGuideLicence => "grey darken-2 shades-text text-white",
        TrappingLicence => "brown darken-2 shades-text text-white",
        _ => String.Empty,
    };
}
