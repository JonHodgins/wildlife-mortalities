@using System.Text.RegularExpressions;
@using WildlifeMortalities.App.Extensions;
@using WildlifeMortalities.Data.Entities.Authorizations;
@using WildlifeMortalities.Shared.Extensions;

<MudCard Outlined="true" Style="@Style">
    <MudCardHeader Class="ml-n1">
        <CardHeaderAvatar>
            <MudChip Class="@GetColourByType()" DisableRipple="true">@GetTypeShortName()</MudChip>
        </CardHeaderAvatar>
    </MudCardHeader>
    <MudCardContent Class="ml-3 mt-n6">
        <MudField Label="Number" DisableUnderLine="true">
            @(Regex.Replace(Authorization.Number, "[A-Za-z-]", ""))
        </MudField>
        <MudField Label="Validity" DisableUnderLine="true">
            @Authorization.ValidFromDateTime.ToString("M") - @Authorization.ValidToDateTime.ToString("M")
        </MudField>
        @if (Authorization is BigGameHuntingLicence bigGameHuntingLicence)
        {
            <MudExpansionPanels>
                <MudExpansionPanel Text="Child authorizations" IsInitiallyExpanded="true">
                    @{
                        var childAuthorizations = bigGameHuntingLicence.HuntingSeals.ValueOrEmpty().OfType<Authorization>()
                        .Union(bigGameHuntingLicence.HuntingPermits.ValueOrEmpty()).Union(bigGameHuntingLicence.PhaHuntingPermits.ValueOrEmpty());
                    }
                    @if (bigGameHuntingLicence.SpecialGuideLicence != null)
                    {
                        <MudItem Class="my-2">
                            <MudItem xs="12" md="6" xxl="4">
                                <AuthorizationCardComponent Authorization="@bigGameHuntingLicence.SpecialGuideLicence" />
                            </MudItem>
                        </MudItem>
                    }
                    @if (childAuthorizations.OfType<HuntingSeal>().Any() == true)
                    {
                        <MudItem>
                            <MudText Typo="Typo.h6">Seals</MudText>
                            <MudGrid>
                                @foreach (var authorization in childAuthorizations.OfType<HuntingSeal>().OrderBy(x => x.Type.GetDisplayName()))
                                {
                                    <MudItem xs="12" md="6" xxl="4">
                                        <AuthorizationCardComponent Authorization="@authorization" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                    }
                    @if (childAuthorizations.OfType<HuntingPermit>().Any() == true)
                    {
                        <MudItem Class="mt-2">
                            <MudText Typo="Typo.h6">Permits</MudText>
                            <MudGrid>
                                @foreach (var authorization in childAuthorizations.OfType<HuntingPermit>().OrderBy(x => x.Type.GetDisplayName()))
                                {
                                    <MudItem xs="12" md="6" xxl="4">
                                        <AuthorizationCardComponent Authorization="@authorization" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                    }
                    @if (childAuthorizations.OfType<PhaHuntingPermit>().Any() == true)
                    {
                        <MudItem Class="mt-2">
                            <MudText Typo="Typo.h6">Permit hunt authorizations</MudText>
                            <MudGrid>
                                @foreach (var authorization in childAuthorizations.OfType<PhaHuntingPermit>().OrderBy(x => x.Type.GetDisplayName()))
                                {
                                    <MudItem xs="12" md="6" xxl="4">
                                        <AuthorizationCardComponent Authorization="@authorization" />
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudItem>
                        }
            </MudExpansionPanel>
            </MudExpansionPanels>
        }

    </MudCardContent>
</MudCard>

@code {
    [Parameter]
    [EditorRequired]
    public Authorization Authorization { get; set; } = null!;

    [Parameter]
    public String Style { get; set; } = String.Empty;

    private string GetTypeShortName() => Authorization switch
    {
        BigGameHuntingLicence => "Big game hunting licence",
        CustomWildlifeActPermit => "Wildlife act permit",
        HuntingPermit p => p.Type.GetDisplayName(),
        HuntingSeal s => s.Type.GetDisplayName(),
        OutfitterAssistantGuideLicence => "Assistant guide licence",
        OutfitterChiefGuideLicence => "Chief guide licence",
        PhaHuntingPermit p => p.Type.GetDisplayName(),
        SmallGameHuntingLicence => "Small game hunting licence",
        SpecialGuideLicence => "Special guide licence",
        TrappingLicence => "Trapping licence",
        _ => String.Empty,
    };

    private string GetColourByType() => Authorization switch
    {
        BigGameHuntingLicence => "purple darken-2 shades-text text-white",
        CustomWildlifeActPermit => "red darken-2 shades-text text-white",
        HuntingPermit => "pink darken-2 shades-text text-white",
        HuntingSeal => "deep-purple darken-2 shades-text text-white",
        OutfitterAssistantGuideLicence => "indigo darken-2 shades-text text-white",
        OutfitterChiefGuideLicence => "cyan darken-2 shades-text text-white",
        PhaHuntingPermit => "teal darken-2 shades-text text-white",
        SmallGameHuntingLicence => "lime darken-2 shades-text text-white",
        SpecialGuideLicence => "blue-grey darken-2 shades-text text-white",
        TrappingLicence => "brown darken-2 shades-text text-white",
        _ => String.Empty,
    };
}
