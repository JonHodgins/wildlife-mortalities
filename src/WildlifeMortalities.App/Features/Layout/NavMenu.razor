@inject IConfiguration Configuration
@inject IJSRuntime JsRuntime

<MudNavMenu>
    <MudNavLink Href="@Constants.Routes.GetHomePageLink()" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="@Constants.Routes.GetThresholdsPageLink()" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.DataThresholding">Threshold harvests</MudNavLink>
    <MudNavLink Href="@Constants.Routes.GetClientLookupPageLink()" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Person">Client overview</MudNavLink>
    @*<MudNavLink Href="@Constants.Routes.GetConservationOfficerLookupPageLink()" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.LocalPolice">Conservation officer overview</MudNavLink>*@
    <MudNavLink Href="@Constants.Routes.GetReportsOverviewPageLink()" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.CrueltyFree">All reports</MudNavLink>
    <MudNavGroup Icon="@Icons.Material.Filled.Help" Title="Help">
        <MudNavLink Href="@_teamsHelpChannelUri">Questions/feedback</MudNavLink>
        <MudNavLink Href="@_teamsIssueTrackerUri">Issue tracker</MudNavLink>
    </MudNavGroup>
    <MudDivider/>
    @*<MudNavGroup Icon="@Icons.Material.Filled.Settings" Title="Administration">
    </MudNavGroup>*@
    <MudNavGroup Icon="@Icons.Material.Filled.DeviceHub" Title="Related apps">
        <MudNavLink OnClick="OpenPosseWebUiInNewTab">POSSE WebUI</MudNavLink>
        <MudNavLink OnClick="OpenPosseStaffUiInNewTab">POSSE StaffUI</MudNavLink>
        <MudNavLink Href="@_humanWildlifeConflictUri">Human-wildlife conflict</MudNavLink>
    </MudNavGroup>
</MudNavMenu>

@code {
    // These deep links will silently fail if the user does not have the relevant app installed (i.e. the URI scheme has no registered handler),
    //  but users should have the apps installed in virtually all cases. 
    // Unfortunately, there is no way for a web app to verify whether a handler is registered (this is a standard browser security feature), 
    //  so therefore we cannot provide a fallback experience.
    // The alternative would be to send the user to an intermediate URL (ex: https://survey123.arcgis.app?itemID=d07322e663294b9b92e60f674e8f45e4), 
    //  but this has a worse UX as the user now has to close a tab in order to get back to wildlife mortalities.
    private string _teamsHelpChannelUri => $"msteams://teams.microsoft.com{Configuration["MicrosoftTeams:HelpChannelRoute"]}";
    private string _teamsIssueTrackerUri => $"msteams://teams.microsoft.com{Configuration["MicrosoftTeams:IssueTrackerRoute"]}";
    private string _humanWildlifeConflictUri => $"arcgis-survey123://?itemID={Configuration["HumanWildlifeConflictSurvey123:ItemId"]}";

    private async Task OpenPosseWebUiInNewTab()
    {
        await OpenInNewTab(Configuration["Posse:WebUiUrl"]!);
    }

    private async Task OpenPosseStaffUiInNewTab()
    {
        await OpenInNewTab(Configuration["Posse:StaffUiUrl"]!);
    }

    private async Task OpenInNewTab(string url)
    {
        Uri? uriResult;
        bool isValidUrl = Uri.TryCreate(url, UriKind.Absolute, out uriResult)
                 && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
        if (!isValidUrl)
        {
            throw new ArgumentException($"'{nameof(url)}' must be a valid URL.", nameof(url));
        }

        await JsRuntime.InvokeVoidAsync("open", CancellationToken.None, url, "_blank");
    }
}