@using System.Reflection;
@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using FluentValidation
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions.Shared;
@using WildlifeMortalities.Shared.Extensions;
@inject ISnackbar Snackbar

<EditForm Model="_viewModel" OnValidSubmit="CloseDialog">
    <FluentValidationValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Submit organic material for biological submission
            </MudText>
        </TitleContent>
        <DialogContent>
            @if (_viewModel.DateSubmitted != null && _viewModel.RequiredOrganicMaterial.All(x => x.IsChecked == true))
            {
                <MudDatePicker @bind-Date="_viewModel.DateSubmitted" Label="Date submitted" For="(() => _viewModel.DateSubmitted)" DateFormat="@Constants.FormatStrings.StandardDateFormat" />
            }
            @foreach (var item in _viewModel.RequiredOrganicMaterial)
            {
                <MudCheckBox @bind-Checked="@item.IsChecked" For="@( () => item.IsChecked)" Label="@item.Label" Disabled="@item.IsDisabled"/>
            }
            <MudTextField @bind-Value="_viewModel.Comment" For="@(() => _viewModel.Comment)" Label="Comment" Lines="4" />
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudSpacer/>
            <MudButton Color="Color.Error" ButtonType="ButtonType.Submit" OnClick="@(() => _result = BioSubmissionDialogResult.SubmitAndClose)">Submit and close</MudButton>
            @if (_viewModel.CanBeAnalysed)
            {
                <MudButton Color="Color.Error" ButtonType="ButtonType.Submit" OnClick="@(() => _result = BioSubmissionDialogResult.SubmitAndProceedToAnalysis)" Disabled="!_viewModel.HasSubmittedAllRequiredOrganicMaterialPrerequisitesForAnalysis">Proceed to analysis</MudButton>
            }
        </DialogActions>
    </MudDialog>
</EditForm>

