@using static BioSubmissionDialog;
@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using FluentValidation


<MudSelect @bind-Value="BioSubmission.HornMeasured" Label="Horn measured?" For="() => BioSubmission.HornMeasured" Disabled="IsReadOnly">
    @foreach (var item in Enum.GetValues<HornMeasured>())
    {
        <MudSelectItem T="HornMeasured?" Value="item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
@if (BioSubmission.HornMeasured is not null && BioSubmission.HornMeasured is not HornMeasured.NoHornProvided)
{
    <MudSelect @bind-Value="BioSubmission.BroomedStatus" Label="Broomed?" For="() => BioSubmission.BroomedStatus" Disabled="IsReadOnly">
        @foreach (var item in Enum.GetValues<BroomedStatus>())
        {
            <MudSelectItem T="BroomedStatus?" Value="item">@item.GetDisplayName()</MudSelectItem>
        }
    </MudSelect>
    <MudTextField Label="Plug number" @bind-Value="BioSubmission.PlugNumber" For="() => BioSubmission.PlugNumber" Disabled="IsReadOnly"/>

    <MudText Typo="Typo.h6">Annuli measurements</MudText>
    <MudSpacer/>
    <ValidationMessage For="@(() => BioSubmission.HornMeasurementEntries)" Style="font-size: 12px; color: var(--mud-palette-error);"/>

    if (IsReadOnly)
    {
        <MudTable Items="@BioSubmission.HornMeasurementEntries">
            <HeaderContent>
                <MudTh>Annulus #</MudTh>
                <MudTh>Length</MudTh>
                <MudTh>Circumference</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nr">@context.Annulus</MudTd>
                <MudTd DataLabel="Sign">@(context.LengthMillimetres == 0 ? string.Empty : $"{context.LengthMillimetres}mm")</MudTd>
                <MudTd DataLabel="Name">@(context.CircumferenceMillimetres == 0 ? string.Empty : $"{context.CircumferenceMillimetres}mm")</MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudList>
            @foreach (var item in BioSubmission.HornMeasurementEntries)
            {
                <MudListItem>
                    <MudStack Row="true">
                        <MudTextField Label="Annulus #" Value="@item.Annulus" Disabled="true"/>
                        <MudNumericField @bind-Value="@item.LengthMillimetres" For="@(() => item.LengthMillimetres)" Label="Length" Adornment="Adornment.End" AdornmentText="mm" Disabled="item.IsBroomed"/>
                        <MudNumericField @bind-Value="@item.CircumferenceMillimetres" For="@(() => item.CircumferenceMillimetres)" Label="Circumference" Adornment="Adornment.End" AdornmentText="mm" Disabled="item.IsBroomed"/>
                        @if (ShowAnnuliBroomedCheckbox(item))
                        {
                            @if (BioSubmission.HornMeasurementEntries.First().Equals(item))
                            {
                                item.IsBroomed = true;
                            }
                            <MudCheckBox Label="Broomed" @bind-Checked="@item.IsBroomed" @bind-Checked:after="(() => ResetHornMeasurementEntryValues(item))"
                                         Disabled="IsAnnuliBroomedCheckboxDisabled(item)"/>
                        }
                        @if (item == BioSubmission.HornMeasurementEntries.Last())
                        {
                            <MudSpacer/>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="RemoveLastHornMeasurementEntry"/>
                        }
                    </MudStack>
                </MudListItem>
            }
        </MudList>
        <MudStack Row="true">
            <MudSpacer/>
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" OnClick="AddHornMeasurementEntry" Size="Size.Medium" Color="Color.Tertiary">Annulus</MudButton>
            <MudSpacer/>
        </MudStack>
    }

    @if (BioSubmission.HornMeasurementEntries.Count >= 3)
    {
        <MudNumericField Label="Length to third annulus" Placeholder="on the short side" Min="0" Max="1000" Adornment="Adornment.End" AdornmentText="mm"
                         @bind-Value="BioSubmission.HornLengthToThirdAnnulusMillimetres" For="() => BioSubmission.HornLengthToThirdAnnulusMillimetres" Disabled="IsReadOnly"/>
    }
}

@code {

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    [EditorRequired]
    public ThinhornSheepBioSubmission BioSubmission { get; set; } = null!;

    [CascadingParameter]
    EditContext Context { get; set; } = null!;

    [CascadingParameter(Name = Constants.CascadingValues.HasAttemptedFormSubmission)]
    public bool HasAttemptedFormSubmission { get; set; }

    protected override void OnInitialized()
    {
        BioSubmission.HornMeasurementEntries ??= new List<HornMeasurementEntry>();
    }

    private bool AnnuliCanBeBroomed(HornMeasurementEntry entry)
    {
        return BioSubmission.BroomedStatus is BroomedStatus.BothHornsBroomed
               || (BioSubmission.BroomedStatus is BroomedStatus.LeftHornBroomed && BioSubmission.HornMeasured is HornMeasured.LeftHorn)
               || (BioSubmission.BroomedStatus is BroomedStatus.RightHornBroomed && BioSubmission.HornMeasured is HornMeasured.RightHorn);
    }

    private bool ShowAnnuliBroomedCheckbox(HornMeasurementEntry entry)
    {
        if (AnnuliCanBeBroomed(entry) == false)
        {
            return false;
        }

        var entries = BioSubmission.HornMeasurementEntries;
    // Show checkbox if this is the first annulus
        if (entries.IndexOf(entry) == 0)
        {
            return true;
        }

        if (entries.Last() == entry)
        {
            return false;
        }
    // Show checkbox if the previous annulus was missing AND (this is the last annulus OR the annulus was marked as missing)
        if (entries[BioSubmission.HornMeasurementEntries.IndexOf(entry) - 1].IsBroomed)
        {
            return true;
        }

        return false;
    }

    private bool IsAnnuliBroomedCheckboxDisabled(HornMeasurementEntry entry)
    {
        var entries = BioSubmission.HornMeasurementEntries;

        if (entries.First().Equals(entry))
        {
            return true;
        }

        var lastBroomedEntry = entries.Where(x => x.IsBroomed).Last();
        var lastBroomedIndex = entries.IndexOf(lastBroomedEntry);
        var currentItemIndex = entries.IndexOf(entry);

        if (currentItemIndex == lastBroomedIndex && entry.IsBroomed)
        {
            return false;
        }

        if (currentItemIndex == lastBroomedIndex + 1)
        {
            return false;
        }

        return true;
    }

    private void ResetHornMeasurementEntryValues(HornMeasurementEntry entry)
    {
        entry.LengthMillimetres = 0;
        entry.CircumferenceMillimetres = 0;

        if (HasAttemptedFormSubmission)
        {
            Context.Validate();
        }
    }

    private void AddHornMeasurementEntry()
    {
        var HornMeasurementEntry = new HornMeasurementEntry { Annulus = BioSubmission.HornMeasurementEntries.Count + 1 };
        BioSubmission.HornMeasurementEntries.Add(HornMeasurementEntry);
    }

    private void RemoveLastHornMeasurementEntry()
    {
        if (BioSubmission.HornMeasurementEntries.Count == 3)
        {
            BioSubmission.HornLengthToThirdAnnulusMillimetres = null;
        }
        BioSubmission.HornMeasurementEntries.RemoveAt(BioSubmission.HornMeasurementEntries.Count - 1);
    }

    public class ThinhornSheepBioSubmissionValidator : BioSubmissionValidator<ThinhornSheepBioSubmission>
    {
        public ThinhornSheepBioSubmissionValidator()
        {
            RuleFor(x => x.HornMeasured).NotEmpty().IsInEnum();
            When(x => x.HornMeasured != HornMeasured.NoHornProvided, () =>
            {
                RuleFor(x => x.Age).NotNull();
                RuleFor(x => x.BroomedStatus).NotEmpty().IsInEnum();
                RuleFor(x => x.PlugNumber).NotEmpty();
                RuleFor(x => x.HornLengthToThirdAnnulusMillimetres).GreaterThan(50).LessThan(1000);
                RuleFor(x => x.HornMeasurementEntries).NotEmpty();
                RuleFor(x => x.Age!.Years).Equal(x => x.HornMeasurementEntries.Last().Annulus).When(x => x.Age != null && x.HornMeasurementEntries.Any());
                RuleForEach(x => x.HornMeasurementEntries).SetValidator(x => new HornMeasurementEntryValidator(x));
            });
        }

        public class HornMeasurementEntryValidator : AbstractValidator<HornMeasurementEntry>
        {
            public HornMeasurementEntryValidator()
            {
            }

            public HornMeasurementEntryValidator(ThinhornSheepBioSubmission submission)
            {
                When(x => x.IsBroomed == false, () =>
                {
                    RuleFor(x => x.LengthMillimetres).InclusiveBetween(10, 1000);
                    RuleFor(x => x.CircumferenceMillimetres).NotEqual(0).GreaterThanOrEqualTo(x => submission.HornMeasurementEntries[submission.HornMeasurementEntries.IndexOf(x) - 1].CircumferenceMillimetres)
                        .When(x => submission.HornMeasurementEntries.IndexOf(x) != 0 && submission.HornMeasurementEntries[submission.HornMeasurementEntries.IndexOf(x) - 1].IsBroomed == false);
                });
            }
        }
    }

}
