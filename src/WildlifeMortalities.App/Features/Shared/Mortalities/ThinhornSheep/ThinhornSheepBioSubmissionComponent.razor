@using static BioSubmissionDialog;
@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using FluentValidation

<MudSelect @bind-Value="BioSubmission.HornMeasured" Label="Horn measured?" For="() => BioSubmission.HornMeasured" Disabled="IsReadOnly">
    @foreach (var item in Enum.GetValues<HornMeasured>())
    {
        <MudSelectItem T="HornMeasured?" Value="item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
<MudSelect @bind-Value="BioSubmission.BroomedStatus" Label="Broomed?" For="() => BioSubmission.BroomedStatus" Disabled="IsReadOnly">
    @foreach (var item in Enum.GetValues<BroomedStatus>())
    {
        <MudSelectItem T="BroomedStatus?" Value="item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
<MudTextField Label="Plug number" @bind-Value="BioSubmission.PlugNumber" For="() => BioSubmission.PlugNumber" Disabled="IsReadOnly"/>

<MudText Typo="Typo.h6">Annuli measurements</MudText>
<MudSpacer/>
<ValidationMessage For="@(() => BioSubmission.HornMeasurementEntries)" Style="font-size: 12px; color: var(--mud-palette-error);"/>

<MudList>
    @foreach (var item in BioSubmission.HornMeasurementEntries)
    {
        @if (IsReadOnly)
        {
            <MudListItem Text="@($"{item.Annulus} - {item.LengthMillimetres}mm")"></MudListItem>
            continue;
        }
        <MudListItem>
            <MudStack Row="true">
                <MudTextField Label="Annulus #" Value="@item.Annulus" Disabled="true"/>
                <MudNumericField @bind-Value="@item.LengthMillimetres" For="@(() => item.LengthMillimetres)" Label="Length" Adornment="Adornment.End" AdornmentText="mm"/>
                <MudNumericField @bind-Value="@item.CircumferenceMillimetres" For="@(() => item.CircumferenceMillimetres)" Label="Circumference" Adornment="Adornment.End" AdornmentText="mm"/>
                @if (item == BioSubmission.HornMeasurementEntries.Last())
                {
                    <MudSpacer/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="RemoveLastHornMeasurementEntry"/>
                }
            </MudStack>
        </MudListItem>
    }
</MudList>

@if(IsReadOnly == false)
    {
    <MudStack Row="true">
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" OnClick="AddHornMeasurementEntry" Size="Size.Medium" Color="Color.Tertiary">Annulus</MudButton>
        <MudSpacer />
    </MudStack>
    }
@if(BioSubmission.HornMeasurementEntries.Count >= 3)
{
    <MudNumericField Label="Length to third annulus" Placeholder="on the short side" Min="0" Max="1000" Adornment="Adornment.End" AdornmentText="mm"
                 @bind-Value="BioSubmission.HornLengthToThirdAnnulusMillimetres" For="() => BioSubmission.HornLengthToThirdAnnulusMillimetres" />
}

@code {

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    [EditorRequired]
    public ThinhornSheepBioSubmission BioSubmission { get; set; } = null!;

    [CascadingParameter]
    EditContext Context { get; set; }

    protected override void OnInitialized()
    {
        BioSubmission.HornMeasurementEntries = new List<HornMeasurementEntry>();
    }

    public class ThinhornSheepBioSubmissionValidator : BioSubmissionValidator<ThinhornSheepBioSubmission>
    {
        public ThinhornSheepBioSubmissionValidator()
        {
            RuleFor(x => x.HornMeasured).NotEmpty().IsInEnum();
            RuleFor(x => x.BroomedStatus).NotEmpty().IsInEnum();
            RuleFor(x => x.PlugNumber).NotEmpty();
            //Todo get correct min/max
            RuleFor(x => x.HornLengthToThirdAnnulusMillimetres).GreaterThan(50).LessThan(1000);
            RuleFor(x => x.HornMeasurementEntries).NotEmpty().When(x => true);
            RuleFor(x => x.HornMeasurementEntries).NotEmpty().When(x => true);

            RuleForEach(x => x.HornMeasurementEntries).SetValidator(x => new HornMeasurementEntryValidator(x));
        }

        public class HornMeasurementEntryValidator : AbstractValidator<HornMeasurementEntry>
        {
            public HornMeasurementEntryValidator()
            {
            }

            public HornMeasurementEntryValidator(ThinhornSheepBioSubmission submission)
            {
                RuleFor(x => x.LengthMillimetres).InclusiveBetween(10, 20);
                RuleFor(x => x.CircumferenceMillimetres).LessThan(x => submission.HornMeasurementEntries[submission.HornMeasurementEntries.IndexOf(x) - 1].CircumferenceMillimetres).When(x => submission.HornMeasurementEntries.IndexOf(x) != 0);
            }
        }
    }

    private void AddHornMeasurementEntry()
    {
        var HornMeasurementEntry = new HornMeasurementEntry { Annulus = BioSubmission.HornMeasurementEntries.Count + 1 };
        BioSubmission.HornMeasurementEntries.Add(HornMeasurementEntry);
    }

    private void RemoveLastHornMeasurementEntry()
    {
        if(BioSubmission.HornMeasurementEntries.Count == 3)
        {
            BioSubmission.HornLengthToThirdAnnulusMillimetres = null;
        }
        BioSubmission.HornMeasurementEntries.RemoveAt(BioSubmission.HornMeasurementEntries.Count - 1);
    }

}
