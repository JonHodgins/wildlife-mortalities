@using FluentValidation;
@using WildlifeMortalities.App.Extensions;
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions;
@using static WildlifeMortalities.App.Features.Shared.Mortalities.BioSubmissionDialog;

<MudSelect @bind-Value="BioSubmission.BroomedStatus" Label="Broomed?" For="(() => BioSubmission.BroomedStatus)">
    @foreach (var item in Enum.GetValues<BroomedStatus>())
    {
        <MudSelectItem Value="item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
<MudTextField Label="Plug number" @bind-Value="BioSubmission.PlugNumber" For="(() => BioSubmission.PlugNumber)" />

<MudToolBar>
    <MudText>Annuli measurements</MudText>
    <MudSpacer />
    <MudTooltip Text="Add an annulus">
        <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Success" OnClick="AddHornMeasurementEntry" />
    </MudTooltip>
</MudToolBar>
<ValidationMessage For="@(() => BioSubmission.HornMeasurementEntries)" Style="font-size: 12px; color: var(--mud-palette-error);" />
@*@if (BioSubmission.HornMeasurementEntries.Any() == false && Context.GetValidationMessages().Any() == true)
{
    <MudAlert Severity="MudBlazor.Severity.Error" Square="true">
        <ValidationMessage For="@( () =>  BioSubmission.HornMeasurementEntries )" />
    </MudAlert>
}*@


<MudList>
    @foreach (var item in BioSubmission.HornMeasurementEntries)
    {
        <MudListItem>
            <MudStack Row="true">
                <MudTextField Label="Annulus #" Value="@item.Annulus" Disabled="true" />
                <MudNumericField @bind-Value="@item.LengthMillimetres" For="@( () => item.LengthMillimetres)" Label="Length" Adornment="Adornment.End" AdornmentText="mm" />
                <MudNumericField @bind-Value="@item.CircumferenceMillimetres" For="@( () => item.CircumferenceMillimetres)" Label="Circumference" Adornment="Adornment.End" AdornmentText="mm" />
                @if (item == BioSubmission.HornMeasurementEntries.Last())
                {
                    <MudSpacer />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="RemoveLastHornMeasurementEntry" />

                }
            </MudStack>
        </MudListItem>
    }
</MudList>

<MudNumericField Label="Length to third annulus" Placeholder="on the short side" Min="0" Max="1000" Adornment="Adornment.End" AdornmentText="mm"
                 @bind-Value="BioSubmission.HornLengthToThirdAnnulusMillimetres" For="(() => BioSubmission.HornLengthToThirdAnnulusMillimetres)" />


@code {
        [Parameter]
        [EditorRequired]
        public ThinhornSheepBioSubmission BioSubmission { get; set; } = null!;

        [CascadingParameter] EditContext Context { get; set; }

    protected override void OnInitialized()
    {
        BioSubmission.HornMeasurementEntries = new();
    }

    public class ThinhornSheepBioSubmissionValidator : BioSubmissionValidator<ThinhornSheepBioSubmission>
    {
        public ThinhornSheepBioSubmissionValidator()
        {
            RuleFor(x => x.BroomedStatus).NotEmpty();
            RuleFor(x => x.PlugNumber).NotEmpty();
            //Todo get correct min/max
            RuleFor(x => x.HornLengthToThirdAnnulusMillimetres).GreaterThan(50).LessThan(1000);
            RuleFor(x => x.HornMeasurementEntries).NotEmpty().When(x => true);
            RuleFor(x => x.HornMeasurementEntries).NotEmpty().When(x => true);

            RuleForEach(x => x.HornMeasurementEntries).SetValidator(x => new HornMeasurementEntryValidator(x));
        }

        public class HornMeasurementEntryValidator : AbstractValidator<HornMeasurementEntry>
        {
            public HornMeasurementEntryValidator()
            {
                
            }

            public HornMeasurementEntryValidator(ThinhornSheepBioSubmission submission)
            {
                RuleFor(x => x.LengthMillimetres).InclusiveBetween(10, 20);
                RuleFor(x => x.CircumferenceMillimetres).LessThan(x => submission.HornMeasurementEntries[submission.HornMeasurementEntries.IndexOf(x) - 1].CircumferenceMillimetres).When(x => submission.HornMeasurementEntries.IndexOf(x) != 0);
            }
        }
    }

    private void AddHornMeasurementEntry()
    {
        var HornMeasurementEntry = new HornMeasurementEntry() { Annulus = (BioSubmission.HornMeasurementEntries.Count + 1) };
        BioSubmission.HornMeasurementEntries.Add(HornMeasurementEntry);
    }

    private void RemoveLastHornMeasurementEntry()
    {
        BioSubmission.HornMeasurementEntries.RemoveAt(BioSubmission.HornMeasurementEntries.Count - 1);
    }
}
