@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using WildlifeMortalities.Data.Enums
@using WildlifeMortalities.Shared.Services
<MudCard Elevation="5" Class="flex-column d-flex" Style="height: 100%">
    <MudCardHeader>
        <CardHeaderContent>
            @if (MortalityViewModel.IsDraft == true)
            {
                <MudText Typo="Typo.h6" Color="Color.Warning">Draft: @MortalityViewModel.Species!.Value.GetDisplayName()</MudText>

            }
            else
            {
                <MudText Typo="Typo.h6">@MortalityViewModel.Species!.Value.GetDisplayName()</MudText>
            }
        </CardHeaderContent>
        <CardHeaderActions>
            @if (EnableBioSubmission == true && MortalityViewModel.GetMortality() is IHasBioSubmission)
            {
                <MudButton Color="Color.Default" OnClick="() => OpenBioSubmissionDialog()" StartIcon="@Icons.Material.Filled.Edit">Bio submission</MudButton>
            }
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent Class="flex-column d-flex" Style="height: 100%">
        <MudStack Row="false">
            @foreach (var property in MortalityViewModel.GetProperties())
            {
                var normalizedValue = (property.Value ?? string.Empty).ToLower();
                @if (bool.TryParse(property.Value, out var value))
                {
                    <MudCheckBox T="bool" ReadOnly="true" Checked="value" Label="@property.Key"/>
                }
                else if (DateTime.TryParse(property.Value, out var dateValue))
                {
                    <MudField DisableUnderLine="true" Label="@property.Key">@dateValue.Date.ToShortDateString()</MudField>
                }
                else
                {
                    <MudField DisableUnderLine="true" Label="@property.Key">@property.Value</MudField>
                }
            }
            @if (MortalityViewModel.Landmark is not null && MortalityViewModel.Comment is not null)
            {
                <MudField DisableUnderLine="true" Label="Landmark">@MortalityViewModel.Landmark</MudField>
                <MudField DisableUnderLine="true" Label="Comment">@MortalityViewModel.Comment</MudField>
            }
        </MudStack>
        <MudSpacer/>
        @if(MortalityViewModel.GetMortality() is IHasBioSubmission)
        {
            <BioSubmissionDetailsComponent BioSubmission="@MortalityViewModel.ExistingBioSubmission"/>
        }
    </MudCardContent>
    <MudCardActions>
        <MudStack Row="true" Class="justify-right">
            <MudSpacer/>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="OnEditClicked" Color="Color.Primary" />
            @if (EnableDelete == true)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="OnDeleteClicked" Color="Color.Error" />
            }
        </MudStack>
    </MudCardActions>
</MudCard>

@code {

    [Parameter]
    public MortalityViewModel MortalityViewModel { get; set; } = null!;

    [Parameter]
    public bool EnableBioSubmission { get; set; } = true;

    [Parameter]
    public bool EnableDelete { get; set; } = false;

    [Parameter]
    public EventCallback OnEditClicked { get; set; }

    [Parameter]
    public EventCallback OnDeleteClicked { get; set; }

    [Inject]
    IDialogService DialogService { get; set; } = null!;

    [Inject]
    IMortalityService Service { get; set; } = null!;

    private async Task OpenBioSubmissionDialog()
    {
        BioSubmission bioSubmission;
        var isNewSubmission = true;
        if (MortalityViewModel.ExistingBioSubmission != null)
        {
            bioSubmission = MortalityViewModel.ExistingBioSubmission;
            isNewSubmission = false;
        }
        else
        {
            var mortalityId = MortalityViewModel.Id!.Value;
            bioSubmission = MortalityViewModel.Species switch
            {
                Species.AmericanBlackBear => new AmericanBlackBearBioSubmission(mortalityId),
                Species.CanadaLynx => new CanadaLynxBioSubmission(mortalityId),
                Species.GreyWolf => new GreyWolfBioSubmission(mortalityId),
                Species.GrizzlyBear => new GrizzlyBearBioSubmission(mortalityId),
                Species.MountainGoat => new MountainGoatBioSubmission(mortalityId),
                Species.MuleDeer => new MuleDeerBioSubmission(mortalityId),
                Species.ThinhornSheep => new ThinhornSheepBioSubmission(mortalityId),
                Species.WhiteTailedDeer => new WhiteTailedDeerBioSubmission(mortalityId),
                Species.WoodBison => new WoodBisonBioSubmission(mortalityId),
                _ => throw new InvalidOperationException($"{nameof(MortalityViewModel.Species)} is not a registered bio submission species.")
                };
        }

        var parameters = new DialogParameters();
        parameters.Add(nameof(BioSubmissionDialog.BioSubmission), bioSubmission);

        var dialog = await DialogService.ShowAsync<BioSubmissionDialog>("", parameters);
        var result = await dialog.Result;

        if (result.Canceled == false)
        {
            if (isNewSubmission)
            {
                await Service.CreateBioSubmission(bioSubmission);
            }
            else
            {
                await Service.UpdateBioSubmission(bioSubmission);
            }
        }
    }

}
