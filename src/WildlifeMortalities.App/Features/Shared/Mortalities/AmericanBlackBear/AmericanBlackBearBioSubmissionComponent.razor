@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using FluentValidation
@using WildlifeMortalities.Shared.Extensions;
@using static WildlifeMortalities.Data.Entities.BiologicalSubmissions.AmericanBlackBearBioSubmission;
@using static WildlifeMortalities.App.Features.Shared.Mortalities.BioSubmissionAnalysisDialog;

<MudCheckBox @bind-Checked="BioSubmission.IsSkullProvided" Label="Skull included?" For="() => BioSubmission.IsSkullProvided" Disabled="IsReadOnly" />

<MudSelect T="AmericanBlackBearSkullCondition?" @bind-Value="@BioSubmission.SkullCondition" Label="Skull condition" Placeholder="Select a condition" For="() => BioSubmission.SkullCondition" Disabled="IsReadOnly">
    @foreach (var item in Enum.GetValues<AmericanBlackBearSkullCondition>())
    {
        <MudSelectItem T="AmericanBlackBearSkullCondition?" Value="@item">@item.GetDisplayName()</MudSelectItem>
    }
</MudSelect>
@if (BioSubmission.SkullCondition.HasValue && BioSubmission.SkullCondition is not AmericanBlackBearSkullCondition.Destroyed)
{
    <MudNumericField Label="Skull length" Min="0" Max="1000" Adornment="Adornment.End" AdornmentText="mm" @bind-Value="BioSubmission.SkullLengthMillimetres" For="() => BioSubmission.SkullLengthMillimetres" Disabled="IsReadOnly"/>
    <MudNumericField Label="Skull width" Min="0" Max="1000" Adornment="Adornment.End" AdornmentText="mm" @bind-Value="BioSubmission.SkullWidthMillimetres" For="() => BioSubmission.SkullWidthMillimetres" Disabled="IsReadOnly"/>
}

@code {

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    [EditorRequired]
    public AmericanBlackBearBioSubmission BioSubmission { get; set; } = null!;

    public class AmericanBlackBearBioSubmissionValidator : BioSubmissionValidator<AmericanBlackBearBioSubmission>
    {
        public AmericanBlackBearBioSubmissionValidator()
        {
            RuleFor(x => x.SkullCondition).NotNull().NotEmpty().IsInEnum();
            When(x => x.SkullCondition != null && x.SkullCondition != AmericanBlackBearSkullCondition.Destroyed, () =>
            {
                RuleFor(x => x.SkullLengthMillimetres)
                    .NotNull()
                    .GreaterThan(x => x.SkullWidthMillimetres).WithMessage("Skull length must be greater than skull width.")
                    .LessThan(1000);
                RuleFor(x => x.SkullWidthMillimetres).NotNull().GreaterThan(50).LessThan(1000);
            });
        }
    }

}
