@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Shared.Mortalities.AmericanBlackBear
@using WildlifeMortalities.App.Features.Shared.Mortalities.CanadaLynx
@using WildlifeMortalities.App.Features.Shared.Mortalities.GreyWolf
@using WildlifeMortalities.App.Features.Shared.Mortalities.GrizzlyBear
@using WildlifeMortalities.App.Features.Shared.Mortalities.MountainGoat
@using WildlifeMortalities.App.Features.Shared.Mortalities.ThinhornSheep
@using WildlifeMortalities.App.Features.Shared.Mortalities.Wolverine
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using FluentValidation
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions.Shared;
@using WildlifeMortalities.Data.Entities.Reports;
@using WildlifeMortalities.Shared.Extensions;
@inject ISnackbar Snackbar
<EditForm OnValidSubmit="Create" Model="BioSubmission" class="scrollable-dialog-parent" onkeypress="preventEnterFromSubmitting(event)">
    <FluentValidationValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Analysis of biological submission
            </MudText>
        </TitleContent>
        <DialogContent>
            <div class="@(BioSubmission is IHasHornMeasurementEntries ? "scrollable-dialog" : "")">
                <CascadingValue Name="@Constants.CascadingValues.HasAttemptedFormSubmission" Value="HasAttemptedFormSubmission">
                    @foreach (var item in _viewModel.RequiredOrganicMaterial)
                    {
                        <MudCheckBox Checked="@item.IsChecked" Label="@item.Label" Disabled="true" />
                    }

                    @switch (BioSubmission)
                    {
                        case AmericanBlackBearBioSubmission bioSubmission:
                            <AmericanBlackBearBioSubmissionComponent BioSubmission="bioSubmission" />
                            break;
                        case CanadaLynxBioSubmission bioSubmission:
                            <CanadaLynxBioSubmissionComponent BioSubmission="bioSubmission" />
                            break;
                        case GreyWolfBioSubmission bioSubmission:
                            <GreyWolfBioSubmissionComponent BioSubmission="bioSubmission" />
                            break;
                        case GrizzlyBearBioSubmission bioSubmission:
                            <GrizzlyBearBioSubmissionComponent BioSubmission="bioSubmission" />
                            break;
                        case MountainGoatBioSubmission bioSubmission:
                            <MountainGoatBioSubmissionComponent BioSubmission="bioSubmission" />
                            break;
                        case ThinhornSheepBioSubmission bioSubmission:
                            <ThinhornSheepBioSubmissionComponent BioSubmission="bioSubmission" />
                            break;
                        case WolverineBioSubmission bioSubmission:
                            <WolverineBioSubmissionComponent BioSubmission="bioSubmission" />
                            break;
                        default:
                            throw new NotImplementedException();
                    }
                </CascadingValue>
                @if (BioSubmission is not IHasHornMeasurementEntries)
                {
                    @if (BioSubmission.Age == null)
                    {
                        <MudStack Row="true">
                            <MudSpacer />
                            <MudButton Class="mt-4" StartIcon="@Icons.Material.Filled.Cake" OnClick="() => BioSubmission.Age = new Age()">Add age</MudButton>
                            <MudSpacer />
                        </MudStack>
                    }
                    @if (BioSubmission.Age != null)
                    {
                        <MudStack Row="true">
                            <MudSpacer />
                            <MudButton Class="mt-4" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => BioSubmission.Age = null">Remove age</MudButton>
                            <MudSpacer />
                        </MudStack>
                        <MudNumericField @bind-Value="BioSubmission.Age.Years" Min="0" Max="200" Label="Age" Adornment="Adornment.End" AdornmentText="years" For="() => BioSubmission.Age.Years" />
                        <MudSelect @bind-Value="BioSubmission.Age.Confidence" Label="Confidence in age" For="() => BioSubmission.Age.Confidence">
                            @foreach (var item in Enum.GetValues<ConfidenceInAge>())
                            {
                                <MudSelectItem T="ConfidenceInAge?" Value="item">@item.GetDisplayName()</MudSelectItem>
                            }
                        </MudSelect>
                    }
                }
                <MudTextField @bind-Value="BioSubmission.Comment" For="@(() => BioSubmission.Comment)" Label="Comment" Lines="4" />
            </div>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudSpacer />
            <MudButton Color="Color.Error" ButtonType="ButtonType.Submit" OnClick="SubmitClicked">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    private bool HasAttemptedFormSubmission;
    private OrganicMaterialForBioSubmissionDialogViewModel _viewModel = null!;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public BioSubmission BioSubmission { get; set; } = null!;

    [Parameter]
    public Report Report { get; set; } = null!;

    protected override void OnInitialized()
    {
        _viewModel = new OrganicMaterialForBioSubmissionDialogViewModel(BioSubmission, Report);
    }

    private void SubmitClicked()
    {
        HasAttemptedFormSubmission = true;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Create()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }
}
