@using WildlifeMortalities.App.Extensions
@using WildlifeMortalities.App.Features.Shared.Mortalities.AmericanBlackBear
@using WildlifeMortalities.App.Features.Shared.Mortalities.CanadaLynx
@using WildlifeMortalities.App.Features.Shared.Mortalities.GreyWolf
@using WildlifeMortalities.App.Features.Shared.Mortalities.GrizzlyBear
@using WildlifeMortalities.App.Features.Shared.Mortalities.MountainGoat
@using WildlifeMortalities.App.Features.Shared.Mortalities.MuleDeer
@using WildlifeMortalities.App.Features.Shared.Mortalities.ThinhornSheep
@using WildlifeMortalities.App.Features.Shared.Mortalities.WhiteTailedDeer
@using WildlifeMortalities.App.Features.Shared.Mortalities.WoodBison
@using WildlifeMortalities.Data.Entities.BiologicalSubmissions
@using FluentValidation
@inject ISnackbar Snackbar
<EditForm OnValidSubmit="Create" Model="BioSubmission">
    <FluentValidationValidator/>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                Biological submission
            </MudText>
        </TitleContent>
        <DialogContent>
            @switch (BioSubmission)
            {
                case AmericanBlackBearBioSubmission bioSubmission:
                    <AmericanBlackBearBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                case CanadaLynxBioSubmission bioSubmission:
                    <CanadaLynxBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                case GreyWolfBioSubmission bioSubmission:
                    <GreyWolfBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                case GrizzlyBearBioSubmission bioSubmission:
                    <GrizzlyBearBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                case MountainGoatBioSubmission bioSubmission:
                    <MountainGoatBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                case MuleDeerBioSubmission bioSubmission:
                    <MuleDeerBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                case ThinhornSheepBioSubmission bioSubmission:
                    <ThinhornSheepBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                case WhiteTailedDeerBioSubmission bioSubmission:
                    <WhiteTailedDeerBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                case WoodBisonBioSubmission bioSubmission:
                    <WoodBisonBioSubmissionComponent BioSubmission="bioSubmission"/>
                    break;
                default:
                    throw new ArgumentException(nameof(BioSubmission));
            }
            @if(BioSubmission.Age == null)
            {
                <MudButton StartIcon="@Icons.Material.Filled.Cake" OnClick="(() => BioSubmission.Age = new Age())">Add age</MudButton>
            }
            @if(BioSubmission.Age != null)
            {
                <MudNumericField @bind-Value="BioSubmission.Age.Years" Min="0" Max="200" Label="Age" Adornment="Adornment.End" AdornmentText="years" For="() => BioSubmission.Age.Years"/>
                <MudSelect @bind-Value="BioSubmission.Age.Confidence" Label="Confidence in age" For="() => BioSubmission.Age.Confidence">
                    @foreach (var item in Enum.GetValues<ConfidenceInAge>())
                    {
                        <MudSelectItem T="ConfidenceInAge?" Value="item">@item.GetDisplayName()</MudSelectItem>
                    }
                </MudSelect>
                <MudTooltip Text="Remove age">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="(() => BioSubmission.Age = null)"></MudIconButton>
                </MudTooltip>
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Error" ButtonType="ButtonType.Submit">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public BioSubmission BioSubmission { get; set; } = null!;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void Create()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    public class BioSubmissionValidator<T> : AbstractValidator<T> where T : BioSubmission
    {
        public BioSubmissionValidator()
        {
            When(x => x.Age != null, () => {
                RuleFor(x => x.Age!.Years).InclusiveBetween(0, 80);
                RuleFor(x => x.Age.Confidence).NotEmpty().IsInEnum();
            });
        }
    }

}
